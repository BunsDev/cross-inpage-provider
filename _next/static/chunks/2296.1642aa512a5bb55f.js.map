{"version":3,"file":"static/chunks/2296.1642aa512a5bb55f.js","mappings":"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","sources":["webpack://_N_E/./components/algoWalletConnect/api.ts","webpack://_N_E/./components/algoWalletConnect/scenarios.ts","webpack://_N_E/./components/algoWalletConnect/dapps.config.ts","webpack://_N_E/./components/algoWalletConnect/AlgoExample.tsx","webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@walletconnect/utils/node_modules/bn.js/lib|buffer","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport algosdk from 'algosdk';\n\nexport enum ChainType {\n  MainNet = 'mainnet',\n  TestNet = 'testnet',\n}\n\nconst mainNetClient = new algosdk.Algodv2('', 'https://mainnet-api.algonode.cloud', '');\nconst testNetClient = new algosdk.Algodv2('', 'https://testnet-api.algonode.cloud', '');\n\nfunction clientForChain(chain: ChainType): algosdk.Algodv2 {\n  switch (chain) {\n    case ChainType.MainNet:\n      return mainNetClient;\n    case ChainType.TestNet:\n      return testNetClient;\n    default:\n      throw new Error(`Unknown chain type: ${chain as string}`);\n  }\n}\n\nexport async function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\n  const params = await clientForChain(chain).getTransactionParams().do();\n  return params;\n}\n\nexport async function apiSubmitTransactions(\n  chain: ChainType,\n  stxns: Uint8Array[],\n): Promise<number> {\n  const { txId } = await clientForChain(chain).sendRawTransaction(stxns).do();\n  return await waitForTransaction(chain, txId as string);\n}\n\nasync function waitForTransaction(chain: ChainType, txId: string): Promise<number> {\n  const client = clientForChain(chain);\n\n  let lastStatus = await client.status().do();\n  let lastRound = lastStatus['last-round'] as number;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const status = await client.pendingTransactionInformation(txId).do();\n    if (status['pool-error']) {\n      throw new Error(`Transaction Pool Error: ${status['pool-error'] as string}`);\n    }\n    if (status['confirmed-round']) {\n      return status['confirmed-round'] as number;\n    }\n    lastStatus = await client.statusAfterBlock(lastRound + 1).do();\n    lastRound = lastStatus['last-round'];\n  }\n}\n","import algosdk from 'algosdk';\nimport { apiGetTxnParams, ChainType } from './api';\n\nconst testAccounts = [\n  algosdk.mnemonicToSecretKey(\n    'cannon scatter chest item way pulp seminar diesel width tooth enforce fire rug mushroom tube sustain glide apple radar chronic ask plastic brown ability badge',\n  ),\n  algosdk.mnemonicToSecretKey(\n    'person congress dragon morning road sweet horror famous bomb engine eager silent home slam civil type melt field dry daring wheel monitor custom above term',\n  ),\n  algosdk.mnemonicToSecretKey(\n    'faint protect home drink journey humble tube clinic game rough conduct sell violin discover limit lottery anger baby leaf mountain peasant rude scene abstract casual',\n  ),\n];\n\nexport function signTxnWithTestAccount(txn: algosdk.Transaction): Uint8Array {\n  const sender = algosdk.encodeAddress(txn.from.publicKey);\n\n  for (const testAccount of testAccounts) {\n    if (testAccount.addr === sender) {\n      return txn.signTxn(testAccount.sk);\n    }\n  }\n\n  throw new Error(`Cannot sign transaction from unknown test account: ${sender}`);\n}\n\nexport interface IScenarioTxn {\n  txn: algosdk.Transaction;\n  signers?: string[];\n  authAddr?: string;\n  message?: string;\n}\n\nexport type ScenarioReturnType = IScenarioTxn[][];\n\nexport type Scenario = (chain: ChainType, address: string) => Promise<ScenarioReturnType>;\n\nfunction getAssetIndex(chain: ChainType): number {\n  if (chain === ChainType.MainNet) {\n    // MainNet USDC\n    return 31566704;\n  }\n\n  if (chain === ChainType.TestNet) {\n    // TestNet USDC\n    return 10458941;\n  }\n\n  throw new Error(`Asset not defined for chain ${chain as string}`);\n}\n\nfunction getAssetReserve(chain: ChainType): string {\n  if (chain === ChainType.MainNet) {\n    return '2UEQTE5QDNXPI7M3TU44G6SYKLFWLPQO7EBZM7K7MHMQQMFI4QJPLHQFHM';\n  }\n\n  if (chain === ChainType.TestNet) {\n    return 'UJBZPEMXLD6KZOLUBUDSZ3DXECXYDADZZLBH6O7CMYXHE2PLTCW44VK5T4';\n  }\n\n  throw new Error(`Asset reserve not defined for chain ${chain as string}`);\n}\n\nfunction getAppIndex(chain: ChainType): number {\n  if (chain === ChainType.MainNet) {\n    return 305162725;\n  }\n\n  if (chain === ChainType.TestNet) {\n    return 22314999;\n  }\n\n  throw new Error(`App not defined for chain ${chain as string}`);\n}\n\nconst singlePayTxn: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from('example note value')),\n    suggestedParams,\n  });\n\n  const txnsToSign = [\n    {\n      txn,\n      message: 'This is a payment transaction that sends 0.1 Algos to yourself.',\n    },\n  ];\n  return [txnsToSign];\n};\n\nconst singleAssetOptInTxn: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    suggestedParams,\n  });\n\n  const txnsToSign = [\n    {\n      txn,\n      message: 'This transaction opts you into the USDC asset if you have not already opted in.',\n    },\n  ];\n  return [txnsToSign];\n};\n\nconst singleAssetTransferTxn: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 1000000,\n    assetIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    suggestedParams,\n  });\n\n  const txnsToSign = [{ txn, message: 'This transaction will send 1 USDC to yourself.' }];\n  return [txnsToSign];\n};\n\nconst singleAssetCloseTxn: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: getAssetReserve(chain),\n    amount: 0,\n    assetIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams,\n  });\n\n  const txnsToSign = [\n    {\n      txn,\n      message:\n        'This transaction will opt you out of the USDC asset. DO NOT submit this to MainNet if you have more than 0 USDC.',\n    },\n  ];\n  return [txnsToSign];\n};\n\nconst singleAppOptIn: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationOptInTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams,\n  });\n\n  const txnsToSign = [{ txn, message: 'This transaction will opt you into a test app.' }];\n  return [txnsToSign];\n};\n\nconst singleAppCall: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationNoOpTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams,\n  });\n\n  const txnsToSign = [{ txn, message: 'This transaction will invoke an app call on a test app.' }];\n  return [txnsToSign];\n};\n\nconst singleAppCloseOut: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationCloseOutTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams,\n  });\n\n  const txnsToSign = [{ txn, message: 'This transaction will opt you out of the test app.' }];\n  return [txnsToSign];\n};\n\nconst singleAppClearState: Scenario = async (\n  chain: ChainType,\n  address: string,\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationClearStateTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from('example note value')),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams,\n  });\n\n  const txnsToSign = [\n    { txn, message: 'This transaction will forcibly opt you out of the test app.' },\n  ];\n  return [txnsToSign];\n};\n\nexport const scenarios: Array<{ name: string; scenario: Scenario }> = [\n  {\n    name: '1. Sign pay txn',\n    scenario: singlePayTxn,\n  },\n  {\n    name: '2. Sign asset opt-in txn',\n    scenario: singleAssetOptInTxn,\n  },\n  {\n    name: '3. Sign asset transfer txn',\n    scenario: singleAssetTransferTxn,\n  },\n  {\n    name: '4. Sign asset close out txn',\n    scenario: singleAssetCloseTxn,\n  },\n  {\n    name: '5. Sign app opt-in txn',\n    scenario: singleAppOptIn,\n  },\n  {\n    name: '6. Sign app call txn',\n    scenario: singleAppCall,\n  },\n  {\n    name: '7. Sign app close out txn',\n    scenario: singleAppCloseOut,\n  },\n  {\n    name: '8. Sign app clear state txn',\n    scenario: singleAppClearState,\n  },\n];\n","export const dapps = [\n  {\n    name: 'Tiny Man',\n    url: 'https://app.tinyman.org/#/swap?asset_in=0',\n  },\n  {\n    name: 'Humble Swap',\n    url: 'https://app.humble.sh/pool',\n  },\n  {\n    name: 'Folks Finnce',\n    url: 'https://app.folks.finance/markets',\n  },\n  {\n    name: 'Algofi',\n    url: 'https://app.algofi.org/',\n  },\n];\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport React from 'react';\nimport { useState, useCallback } from 'react';\nimport algosdk from 'algosdk';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from 'algorand-walletconnect-qrcode-modal';\nimport { IInternalEvent } from '@walletconnect/types';\n\nimport { Scenario, scenarios, signTxnWithTestAccount } from './scenarios';\nimport { ChainType, apiSubmitTransactions } from './api';\nimport { IWalletTransaction, SignTxnParams, IResult } from './types';\n\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from './dapps.config';\n\nfunction stringToChainType(s: string): ChainType {\n  switch (s) {\n    case ChainType.MainNet.toString():\n      return ChainType.MainNet;\n    case ChainType.TestNet.toString():\n      return ChainType.TestNet;\n    default:\n      throw new Error(`Unknown chain selected: ${s}`);\n  }\n}\n\nexport default function AlgoExample() {\n  const [connector, setConnector] = useState<WalletConnect>();\n  const [accounts, setAccounts] = useState<string[]>();\n  const [address, setAddress] = useState<string>();\n  const [connected, setConnected] = useState<boolean>(false);\n  const [chain, setChain] = useState<ChainType>(ChainType.TestNet);\n  const [formattedResult, setFormattedResult] = useState<IResult>();\n  const [signedTxns, setSignedTxns] = useState<Uint8Array[][]>();\n\n  const handleSessionUpdate = useCallback((accounts: string[]) => {\n    const address = accounts[0];\n    setAccounts(accounts);\n    setAddress(address);\n  }, []);\n\n  const handleConnected = useCallback((payload: IInternalEvent) => {\n    const { accounts } = payload.params[0];\n    const address = accounts[0];\n    setAccounts(accounts as string[]);\n    setAddress(address as string);\n    setConnected(true);\n  }, []);\n\n  const handleResetApp = useCallback(() => {\n    setAddress('');\n    setAccounts([]);\n    setConnector(null);\n    setConnected(false);\n  }, []);\n\n  const handleDisconnected = useCallback(() => {\n    handleResetApp();\n  }, [handleResetApp]);\n\n  const subscribeToEvents = useCallback(\n    (connector: WalletConnect) => {\n      if (!connector) {\n        return;\n      }\n\n      connector.on('session_update', (error, payload: IInternalEvent) => {\n        console.log(`algo connector.on(\"session_update\")`, payload);\n\n        if (error) {\n          throw error;\n        }\n\n        const { accounts } = payload.params[0];\n        handleSessionUpdate(accounts as string[]);\n      });\n\n      connector.on('connect', (error, payload: IInternalEvent) => {\n        console.log(`algo connector.on(\"connect\")`, payload);\n\n        if (error) {\n          throw error;\n        }\n\n        handleConnected(payload);\n      });\n\n      connector.on('disconnect', (error) => {\n        console.log(`algo connector.on(\"disconnect\")`);\n\n        if (error) {\n          throw error;\n        }\n\n        handleDisconnected();\n      });\n\n      if (connector.connected) {\n        const { accounts } = connector;\n        const address = accounts[0];\n        setAccounts(accounts);\n        setAddress(address);\n        setConnected(true);\n        handleSessionUpdate(accounts);\n      }\n\n      setConnector(connector);\n    },\n    [handleConnected, handleDisconnected, handleSessionUpdate],\n  );\n\n  const handleConnectWallet = useCallback(async () => {\n    const bridge = 'https://bridge.walletconnect.org';\n\n    const connector = new WalletConnect({\n      storageId: 'walletconnect_algo',\n      bridge,\n      qrcodeModal: QRCodeModal,\n    });\n    // @ts-ignore\n    window.wcConnector = connector;\n    setConnector(connector);\n\n    if (!connector.connected) {\n      await connector.createSession({\n        network: 'algo',\n      });\n    }\n\n    subscribeToEvents(connector);\n  }, [subscribeToEvents]);\n\n  const handleSignTxnScenario = useCallback(\n    async (scenario: Scenario) => {\n      if (!connector) {\n        return;\n      }\n\n      try {\n        const txnsToSign = await scenario(chain, address);\n        const flatTxns = txnsToSign.reduce((acc, val) => acc.concat(val), []);\n\n        const walletTxns: IWalletTransaction[] = flatTxns.map(\n          ({ txn, signers, authAddr, message }) => ({\n            txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString('base64'),\n            signers,\n            authAddr,\n            message,\n          }),\n        );\n\n        // sign transaction\n        const params: SignTxnParams = [walletTxns];\n        const result: Array<string | null> = await connector.sendCustomRequest({\n          method: 'algo_signTxn',\n          params,\n        });\n\n        console.log('Raw response:', result);\n\n        const indexToGroup = (index: number) => {\n          for (let group = 0; group < txnsToSign.length; group++) {\n            const groupLength = txnsToSign[group].length;\n            if (index < groupLength) {\n              return [group, index];\n            }\n\n            index -= groupLength;\n          }\n\n          throw new Error(`Index too large for groups: ${index}`);\n        };\n\n        const signedPartialTxns: Array<Array<Uint8Array | null>> = txnsToSign.map(() => []);\n        result.forEach((r, i) => {\n          const [group, groupIndex] = indexToGroup(i);\n          const toSign = txnsToSign[group][groupIndex];\n\n          if (r == null) {\n            if (toSign.signers !== undefined && toSign.signers?.length < 1) {\n              signedPartialTxns[group].push(null);\n              return;\n            }\n            throw new Error(`Transaction at index ${i}: was not signed when it should have been`);\n          }\n\n          if (toSign.signers !== undefined && toSign.signers?.length < 1) {\n            throw new Error(`Transaction at index ${i} was signed when it should not have been`);\n          }\n\n          const rawSignedTxn = Buffer.from(r, 'base64');\n          signedPartialTxns[group].push(new Uint8Array(rawSignedTxn));\n        });\n\n        const signedTxns: Uint8Array[][] = signedPartialTxns.map(\n          (signedPartialTxnsInternal, group) => {\n            return signedPartialTxnsInternal.map((stxn, groupIndex) => {\n              if (stxn) {\n                return stxn;\n              }\n\n              return signTxnWithTestAccount(txnsToSign[group][groupIndex].txn);\n            });\n          },\n        );\n\n        const signedTxnInfo: Array<\n          Array<{\n            txID: string;\n            signingAddress?: string;\n            signature: string;\n          } | null>\n        > = signedPartialTxns.map((signedPartialTxnsInternal, group) => {\n          return signedPartialTxnsInternal.map((rawSignedTxn, i) => {\n            if (rawSignedTxn == null) {\n              return null;\n            }\n\n            const signedTxn = algosdk.decodeSignedTransaction(rawSignedTxn);\n            const txn = signedTxn.txn as unknown as algosdk.Transaction;\n            const txID = txn.txID();\n            const unsignedTxID = txnsToSign[group][i].txn.txID();\n\n            if (txID !== unsignedTxID) {\n              throw new Error(\n                `Signed transaction at index ${i} differs from unsigned transaction. Got ${txID}, expected ${unsignedTxID}`,\n              );\n            }\n\n            if (!signedTxn.sig) {\n              throw new Error(`Signature not present on transaction at index ${i}`);\n            }\n\n            return {\n              txID,\n              signingAddress: signedTxn.sgnr ? algosdk.encodeAddress(signedTxn.sgnr) : undefined,\n              signature: Buffer.from(signedTxn.sig).toString('base64'),\n            };\n          });\n        });\n\n        // format displayed result\n        const formattedResult: IResult = {\n          method: 'algo_signTxn',\n          body: signedTxnInfo,\n        };\n\n        setConnector(connector);\n        setSignedTxns(signedTxns);\n        setFormattedResult(formattedResult);\n      } catch (error) {\n        console.error(error);\n        setConnector(connector);\n        setFormattedResult(null);\n      }\n    },\n    [address, chain, connector],\n  );\n\n  const handleSubmitTxs = useCallback(async () => {\n    if (signedTxns == null) {\n      throw new Error('Transactions to submit are null');\n    }\n\n    for (let i = 0; i < signedTxns.length; i++) {\n      try {\n        const confirmedRound = await apiSubmitTransactions(chain, signedTxns[i]);\n        console.log(`Transaction confirmed at round ${confirmedRound}`);\n      } catch (err) {\n        console.error(`Error submitting transaction at index ${i}:`, err);\n      }\n    }\n  }, [signedTxns, chain]);\n\n  const handleKissSession = useCallback(async () => {\n    await connector.killSession();\n    handleResetApp();\n  }, [connector, handleResetApp]);\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n      <main>\n        {connected && (\n          <p>\n            {`Connected to `}\n            <select\n              onChange={(event) => setChain(stringToChainType(event.target.value))}\n              value={chain}\n            >\n              <option value={ChainType.TestNet}>Algorand TestNet</option>\n              <option value={ChainType.MainNet}>Algorand MainNet</option>\n            </select>\n          </p>\n        )}\n        {connected ? (\n          <>\n            <div>\n              <pre>Connected as: {address}</pre>\n              <button onClick={handleKissSession}>Disconnect</button>\n            </div>\n            {formattedResult && (\n              <div>\n                <pre>formattedResult: {JSON.stringify(formattedResult)}</pre>\n                <button onClick={handleSubmitTxs}>{'Submit transaction to network.'}</button>\n              </div>\n            )}\n            {scenarios.map(({ name, scenario }) => (\n              <button key={name} onClick={() => handleSignTxnScenario(scenario)}>\n                {name}\n              </button>\n            ))}\n            <button onClick={() => connector.killSession()}>Disconnect</button>\n          </>\n        ) : (\n          <>\n            <button onClick={handleConnectWallet}>Connect Wallet</button>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} ↗\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","/* (ignored) */"],"names":["ChainType","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","mainNetClient","algosdk","testNetClient","clientForChain","chain","MainNet","TestNet","apiGetTxnParams","_x","_apiGetTxnParams","apply","arguments","_asyncToGenerator","getTransactionParams","do","_apiSubmitTransactions","stxns","txId","_yield$clientForChain","sendRawTransaction","waitForTransaction","_x4","_x5","_waitForTransaction","client","lastStatus","status","lastRound","pendingTransactionInformation","statusAfterBlock","testAccounts","getAssetIndex","getAppIndex","scenarios","name","scenario","address","suggestedParams","txn","from","to","amount","note","Uint8Array","Buffer","message","_x2","assetIndex","_x3","_x6","getAssetReserve","closeRemainderTo","addr","_x7","_x8","appIndex","appArgs","_x9","_x10","_x11","_x12","_x13","_x14","_x15","_x16","dapps","url","AlgoExample","_useState","useState","_useState2","_slicedToArray","connector","setConnector","_useState3","_useState4","setAccounts","_useState5","_useState6","setAddress","_useState7","_useState8","connected","setConnected","_useState9","_useState10","setChain","_useState11","_useState12","formattedResult","setFormattedResult","_useState13","_useState14","signedTxns","setSignedTxns","handleSessionUpdate","useCallback","accounts","handleConnected","payload","params","handleResetApp","handleDisconnected","subscribeToEvents","on","error","console","log","handleConnectWallet","WalletConnect","storageId","bridge","qrcodeModal","QRCodeModal","window","wcConnector","createSession","network","handleSignTxnScenario","txnsToSign","walletTxns","flatTxns","reduce","acc","val","concat","map","signers","authAddr","toString","result","sendCustomRequest","method","indexToGroup","index","group","length","groupLength","signedPartialTxns","forEach","r","i","_toSign$signers2","_toSign$signers","_indexToGroup","_indexToGroup2","groupIndex","toSign","undefined","push","rawSignedTxn","signedPartialTxnsInternal","stxn","signTxnWithTestAccount","sender","publicKey","testAccount","signTxn","sk","signedTxnInfo","signedTxn","txID","unsignedTxID","sig","signingAddress","sgnr","signature","body","handleSubmitTxs","confirmedRound","apiSubmitTransactions","err","handleKissSession","killSession","_jsxs","children","_jsx","DAppList","onChange","event","stringToChainType","s","target","value","_Fragment","onClick","JSON","stringify","props","className","styles","dapp","href"],"sourceRoot":""}