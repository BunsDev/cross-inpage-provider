{"version":3,"file":"static/chunks/3163.80cc2b0990a5049d.js","mappings":"gMAce,SAASA,GAAoB,CAC1C,IAAMC,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,EAAiC,IAAI,EA0BvD,MAzBAC,CAAAA,EAAAA,EAAAA,eAAAA,EAAgB,UAAM,KAAAC,EAAAC,EACpB,GAAI,CAACJ,EAAUK,OAAO,EAAI,MAAkB,EAAlBF,CAAAA,EAACH,EAAUK,OAAO,GAAjBF,EAAmBG,aAAa,EAAE,CAC3DC,QAAQC,KAAK,CAAC,oBACd,MACF,CACAC,OAAOC,UAAU,CAAG,IAAIC,EAAAA,EAAcA,CAAC,CACrCC,YAAW,IAAmB,EAAnBR,CAAAA,EAAEJ,EAAUK,OAAO,SAAjBD,EAAmBE,aAAa,CAC7CO,gBAAiB,QACjBC,cAAe,OACfC,QAAS,gBACTC,eAAc,SAACC,CAAO,CAAE,CACtB,IAAAC,EAA2BD,EAAQE,IAAI,CAA/BC,EAAMF,EAANE,MAAM,CAEd,GADAb,QAAQc,GAAG,CAAC,wBAAyB,CAAED,OAAAA,EAAQE,OADzBJ,EAANI,MAAM,GAElBF,OAAAA,EACF,MAAO,oBAET,IAAIA,UAAAA,EACF,MAAO,CAAEG,QAAS,iBAAkB,CAEtC,IAAIH,UAAAA,EACF,MAAM,MAAU,gCAClB,CAEJ,EACF,EAAG,EAAE,EAEHI,CAAAA,EAAAA,EAAAA,IAAAA,EAAA,OAAAC,SAAA,CACK,CAAC,KAAM,QAAS,QAAQ,CAACC,GAAG,CAAC,SAACN,CAAM,CAAEO,CAAK,CAAK,CAC/C,MACEH,CAAAA,EAAAA,EAAAA,IAAAA,EAAA,UAEEI,QAAS,UAAM,CAERC,CAAAA,EAAAA,EAAAA,CAAAA,EACH,CACET,OAAAA,EACAE,OAAQ,CAAC,CAAEK,MAAAA,CAAM,EACnB,EACAlB,OAAOC,UACT,CACF,EAAEe,SAAA,CACH,gBACeL,EAAO,IACvB,EAbOA,EAeX,GACAU,CAAAA,EAAAA,EAAAA,GAAAA,EAAA,UACEC,IAAK/B,EACLgC,IAAK,gBACLC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQ,EACxCC,YAAa,CAAE,GACf,EAGV,wEClEA,SAAsBP,EAAUQ,CAAA,CAAAC,CAAA,SAAAC,EAAAC,KAAA,MAAAC,UAAA,CAgB/B,SAAAF,GAAA,OAAAA,CAAAA,EAAAG,CAAAA,EAAAA,EAAAA,CAAAA,EAhBM,UAAAxB,CAAA,CAELyB,CAAuB,CACR,KAFbvB,EAAMF,EAANE,MAAM,CAAEE,EAAMJ,EAANI,MAAM,CAGhB,GAAI,CACF,IAAMsB,EAAM,MAASD,IAAM,EAANA,EAAM,OAANA,EAAQE,OAAO,CAAC,CACnCC,MAAO,gBACP3B,KAAM,CACJC,OAAAA,EACAE,OAAAA,CACF,CACF,EAAE,CACFf,QAAQc,GAAG,CAAC,cAAeD,EAAQ,QAASwB,EAC9C,CAAE,MAAOG,EAAG,CACVxC,QAAQC,KAAK,CAAC,+BAAgCY,EAAQ,QAAS2B,EACjE,CACF,IAACP,KAAA,MAAAC,UAAA","sources":["webpack://_N_E/./components/iframe/IFrameHostExample.tsx","webpack://_N_E/./components/iframe/utils.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable @typescript-eslint/restrict-plus-operands,@typescript-eslint/ban-ts-comment */\nimport React from 'react';\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport { JsBridgeIframe } from '@onekeyfe/cross-inpage-provider-core'\nimport { IJsonRpcRequest } from '@onekeyfe/cross-inpage-provider-types'\nimport { sendMethod } from './utils'\n\ndeclare global {\n  interface Window {\n    frameBridge: JsBridgeIframe;\n    hostBridge: JsBridgeIframe;\n  }\n}\n\nexport default function IFrameHostExample() {\n  const iframeRef = useRef<HTMLIFrameElement | null>(null);\n  useLayoutEffect(() => {\n    if (!iframeRef.current || !iframeRef.current?.contentWindow) {\n      console.error('iframe not ready');\n      return;\n    }\n    window.hostBridge = new JsBridgeIframe({\n      remoteFrame: iframeRef.current?.contentWindow,\n      remoteFrameName: 'FRAME',\n      selfFrameName: 'HOST',\n      channel: 'onekey-js-sdk',\n      receiveHandler(payload) {\n        const { method, params } = payload.data as IJsonRpcRequest;\n        console.log('receiveHandler >>>>> ', { method, params });\n        if (method === 'hi') {\n          return 'from HOST: hahahah';\n        }\n        if (method === 'hello') {\n          return { message: 'from HOST: okok' };\n        }\n        if (method === 'error') {\n          throw new Error('from HOST: something is wrong');\n        }\n      },\n    });\n  }, []);\n  return (\n    <div>\n        {['hi', 'hello', 'error'].map((method, index) => {\n          return (\n            <button\n              key={method}\n              onClick={() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                void sendMethod(\n                  {\n                    method,\n                    params: [{ index }],\n                  },\n                  window.hostBridge,\n                );\n              }}\n            >\n              sendToFrame ({method})\n            </button>\n          );\n        })}\n        <iframe\n          ref={iframeRef}\n          src={'/iframe/frame'}\n          style={{ width: '100%', height: '400px' }}\n          frameBorder={0}\n        />\n    </div>\n  );\n}\n","import React from 'react';\nimport { JsBridgeIframe } from '@onekeyfe/cross-inpage-provider-core';\nimport { IJsonRpcRequest } from '@onekeyfe/cross-inpage-provider-types';\n\nexport async function sendMethod(\n  { method, params }: IJsonRpcRequest,\n  bridge?: JsBridgeIframe,\n): Promise<void> {\n  try {\n    const result = await bridge?.request({\n      scope: '$hardware_sdk',\n      data: {\n        method,\n        params,\n      },\n    });\n    console.log('result >>>>', method, ' --> ', result);\n  } catch (e) {\n    console.error('bridge send ERROR response: ', method, ' --> ', e);\n  }\n}\n"],"names":["IFrameHostExample","iframeRef","useRef","useLayoutEffect","_iframeRef$current","_iframeRef$current2","current","contentWindow","console","error","window","hostBridge","JsBridgeIframe","remoteFrame","remoteFrameName","selfFrameName","channel","receiveHandler","payload","_ref","data","method","log","params","message","_jsxs","children","map","index","onClick","sendMethod","_jsx","ref","src","style","width","height","frameBorder","_x","_x2","_sendMethod","apply","arguments","_asyncToGenerator","bridge","result","request","scope","e"],"sourceRoot":""}