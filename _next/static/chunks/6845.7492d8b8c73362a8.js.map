{"version":3,"file":"static/chunks/6845.7492d8b8c73362a8.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@solana/buffer-layout/lib/Layout.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/bn.js/lib/bn.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/borsh/lib/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/bs58/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/buffer/index.js","webpack://_N_E/./node_modules/bigint-buffer/dist/browser.js","webpack://_N_E/./node_modules/jayson/lib/client/browser/index.js","webpack://_N_E/./node_modules/jayson/lib/generateRequest.js","webpack://_N_E/./node_modules/rpc-websockets/dist/index.browser.js","webpack://_N_E/./node_modules/rpc-websockets/dist/lib/client.js","webpack://_N_E/./node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://_N_E/./node_modules/safe-buffer/index.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-solana-provider/dist/ProviderSolanaBase.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-solana-provider/dist/utils.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-solana-provider/dist/ProviderSolana.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-solana-provider/dist/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/_assert.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/_sha2.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/_u64.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/hmac.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/sha256.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/sha3.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/sha512.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/hashes/esm/utils.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/secp256k1/lib/esm/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/superstruct/lib/index.es.js","webpack://_N_E/<anon>"],"sourcesContent":["/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","import { IInjectedProviderNames } from '@onekeyfe/cross-inpage-provider-types';\nimport { ProviderBase } from '@onekeyfe/cross-inpage-provider-core';\nclass ProviderSolanaBase extends ProviderBase {\n    constructor(props) {\n        super(props);\n        this.providerName = IInjectedProviderNames.solana;\n    }\n    request(data) {\n        return this.bridgeRequest(data);\n    }\n}\nexport { ProviderSolanaBase };\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport base58 from 'bs58';\nexport const encodeTransaction = (transaction) => {\n    return base58.encode(transaction.serialize({ requireAllSignatures: false }));\n};\nexport const decodeSignedTransaction = (message) => {\n    const txByte = base58.decode(message);\n    try {\n        return Transaction.from(txByte);\n    }\n    catch (_a) {\n        return VersionedTransaction.deserialize(txByte);\n    }\n};\nexport function isWalletEventMethodMatch(method, name) {\n    return method === `metamask_${name}` || method === `wallet_events_${name}`;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { PublicKey } from '@solana/web3.js';\nimport { getOrCreateExtInjectedJsBridge } from '@onekeyfe/extension-bridge-injected';\nimport base58 from 'bs58';\nimport { ProviderSolanaBase } from './ProviderSolanaBase';\nimport { decodeSignedTransaction, encodeTransaction, isWalletEventMethodMatch } from './utils';\nconst PROVIDER_EVENTS = {\n    'connect': 'connect',\n    'disconnect': 'disconnect',\n    'accountChanged': 'accountChanged',\n    'message_low_level': 'message_low_level',\n};\nclass ProviderSolana extends ProviderSolanaBase {\n    constructor(props) {\n        super(Object.assign(Object.assign({}, props), { bridge: props.bridge || getOrCreateExtInjectedJsBridge({ timeout: props.timeout }) }));\n        this.isPhantom = true;\n        this.isSolflare = true;\n        this.isGlow = true;\n        this._publicKey = null;\n        this._registerEvents();\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    get isConnected() {\n        return this._publicKey !== null;\n    }\n    _registerEvents() {\n        window.addEventListener('onekey_bridge_disconnect', () => {\n            this._handleDisconnected();\n        });\n        this.on(PROVIDER_EVENTS.message_low_level, (payload) => {\n            const { method, params } = payload;\n            if (isWalletEventMethodMatch(method, PROVIDER_EVENTS.accountChanged)) {\n                this._handleAccountChange(params);\n            }\n        });\n    }\n    _callBridge(params) {\n        return this.bridgeRequest(params);\n    }\n    postMessage(param) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return this._callBridge(param);\n    }\n    connect(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.publicKey) {\n                return { publicKey: this.publicKey };\n            }\n            // TODO: pass options to connect\n            const result = yield this._callBridge({\n                method: 'connect',\n                params: options,\n            });\n            const publicKey = new PublicKey(result.publicKey);\n            this._handleConnected(publicKey, { emit: true });\n            return { publicKey };\n        });\n    }\n    _handleConnected(publicKey, options = { emit: true }) {\n        this._publicKey = publicKey;\n        if (options.emit && this.isConnectionStatusChanged('connected')) {\n            this.connectionStatus = 'connected';\n            this.emit('connect', publicKey);\n            this.emit('accountChanged', publicKey);\n        }\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._callBridge({\n                method: 'disconnect',\n                params: void 0,\n            });\n            this._handleDisconnected();\n        });\n    }\n    _handleDisconnected(options = { emit: true }) {\n        this._publicKey = null;\n        if (options.emit && this.isConnectionStatusChanged('disconnected')) {\n            this.connectionStatus = 'disconnected';\n            this.emit('disconnect');\n            this.emit('accountChanged', null);\n        }\n    }\n    isAccountsChanged(account) {\n        var _a;\n        return (account === null || account === void 0 ? void 0 : account.publicKey) !== ((_a = this._publicKey) === null || _a === void 0 ? void 0 : _a.toBase58());\n    }\n    // trigger by bridge account change event\n    _handleAccountChange(payload) {\n        const account = payload.accounts[0];\n        let publicKey;\n        try {\n            publicKey = new PublicKey(account.publicKey);\n        }\n        catch (error) {\n            // noop\n        }\n        if (this.isAccountsChanged(account)) {\n            this.emit('accountChanged', publicKey || null);\n        }\n        if (!account) {\n            this._handleDisconnected();\n            return;\n        }\n        if (publicKey) {\n            this._handleConnected(publicKey, { emit: false });\n        }\n    }\n    signAndSendTransaction(transaction, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleSignAndSendTransaction({\n                message: encodeTransaction(transaction),\n                options,\n            });\n        });\n    }\n    _handleSignAndSendTransaction(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._callBridge({\n                method: 'signAndSendTransaction',\n                params,\n            });\n            return result;\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleSignTransaction({\n                message: encodeTransaction(transaction),\n            });\n        });\n    }\n    _handleSignTransaction(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._callBridge({\n                method: 'signTransaction',\n                params,\n            });\n            return decodeSignedTransaction(result);\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleSignAllTransactions({\n                message: transactions.map(encodeTransaction),\n            });\n        });\n    }\n    _handleSignAllTransactions(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._callBridge({\n                method: 'signAllTransactions',\n                params,\n            });\n            return result.map(decodeSignedTransaction);\n        });\n    }\n    signMessage(message, display) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleSignMessage({ message, display });\n        });\n    }\n    _handleSignMessage(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { message, display } = params;\n            const result = yield this._callBridge({\n                method: 'signMessage',\n                params: {\n                    message: typeof message === 'string' ? message : base58.encode(message),\n                    display,\n                },\n            });\n            return {\n                signature: base58.decode(result.signature),\n                publicKey: new PublicKey(result.publicKey),\n            };\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    request(...args) {\n        let method;\n        let params;\n        if (typeof args[0] === 'string') {\n            method = args[0];\n            params = args[1];\n        }\n        else {\n            const payload = args[0];\n            method = payload.method;\n            params = payload.params;\n        }\n        switch (method) {\n            case 'connect':\n                return this.connect(params);\n            case 'disconnect':\n                return this.disconnect();\n            case 'signTransaction':\n                return this._handleSignTransaction(params);\n            case 'signAllTransactions':\n                return this._handleSignAllTransactions(params);\n            case 'signMessage':\n                return this._handleSignMessage(params);\n            case 'signAndSendTransaction':\n                return this._handleSignAndSendTransaction(params);\n        }\n        return this._callBridge({ method, params });\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n}\nexport { ProviderSolana };\n","export * from './ProviderSolana';\nexport * from './ProviderSolanaBase';\n","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    super(msg);\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n\n    this.failures = () => {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];\n    };\n  }\n\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\"\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nfunction* run(value, struct, options = {}) {\n  const {\n    path = [],\n    branch = [value],\n    coerce = false,\n    mask = false\n  } = options;\n  const ctx = {\n    path,\n    branch\n  };\n\n  if (coerce) {\n    value = struct.coercer(value, ctx);\n\n    if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key];\n        }\n      }\n    }\n  }\n\n  let valid = true;\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false;\n    yield [failure, undefined];\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask\n    });\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false;\n        yield [t[0], undefined];\n      } else if (coerce) {\n        v = t[1];\n\n        if (k === undefined) {\n          value = v;\n        } else if (value instanceof Map) {\n          value.set(k, v);\n        } else if (value instanceof Set) {\n          value.add(v);\n        } else if (isObject(value)) {\n          value[k] = v;\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value, ctx)) {\n      valid = false;\n      yield [failure, undefined];\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value];\n  }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nclass Struct {\n  constructor(props) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  assert(value) {\n    return assert(value, this);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n\n  create(value) {\n    return create(value, this);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n\n  mask(value) {\n    return mask(value, this);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n\n  validate(value, options = {}) {\n    return validate(value, this, options);\n  }\n\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nfunction assert(value, struct) {\n  const result = validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nfunction create(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nfunction mask(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nfunction validate(value, struct, options = {}) {\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\n\nfunction assign(...Structs) {\n  const schemas = Structs.map(s => s.schema);\n  const schema = Object.assign({}, ...schemas);\n  return object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nfunction deprecated(struct, log) {\n  return new Struct({ ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n\n  });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n\n    *entries(value, ctx) {\n      const struct = fn(value, ctx);\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nfunction lazy(fn) {\n  let struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n\n    *entries(value, ctx) {\n      var _struct;\n\n      (_struct = struct) != null ? _struct : struct = fn();\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      var _struct2;\n\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      var _struct3;\n\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nfunction omit(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = { ...schema\n  };\n\n  for (const key of keys) {\n    delete subschema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nfunction partial(struct) {\n  const schema = struct instanceof Struct ? { ...struct.schema\n  } : { ...struct\n  };\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nfunction pick(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {};\n\n  for (const key of keys) {\n    subschema[key] = schema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\n\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nfunction date() {\n  return define('date', value => {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\nfunction enums(values) {\n  const schema = {};\n  const description = values.map(v => print(v)).join();\n\n  for (const key of values) {\n    schema[key] = key;\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n\n    validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\nfunction func() {\n  return define('func', value => {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nfunction instance(Class) {\n  return define('instance', value => {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\nfunction integer() {\n  return define('integer', value => {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx);\n      }\n    },\n\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx);\n      }\n    },\n\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx);\n      }\n    }\n\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n\n    validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\nfunction never() {\n  return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nfunction nullable(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\n\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n\n        for (const key of knowns) {\n          unknowns.delete(key);\n          yield [key, value[key], schema[key]];\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n\n    coercer(value) {\n      return isObject(value) ? { ...value\n      } : value;\n    }\n\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nfunction optional(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k];\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nfunction regexp() {\n  return define('regexp', value => {\n    return value instanceof RegExp;\n  });\n}\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\nfunction tuple(Elements) {\n  const Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length);\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\nfunction union(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n\n    validator(value, ctx) {\n      const failures = [];\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value), ...failures];\n    }\n\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction coerce(struct, condition, coercer) {\n  return new Struct({ ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction defaulted(struct, fallback, options = {}) {\n  return coerce(struct, unknown(), x => {\n    const f = typeof fallback === 'function' ? fallback() : fallback;\n\n    if (x === undefined) {\n      return f;\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x\n      };\n      let changed = false;\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        return ret;\n      }\n    }\n\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), x => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nfunction empty(struct) {\n  const expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', value => {\n    if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return size === 0 || expected + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nfunction max(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'max', value => {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nfunction min(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'min', value => {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', value => {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nfunction size(struct, min, max = min) {\n  const expected = \"Expected a \" + struct.type;\n  const of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', value => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return min <= size && size <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nfunction refine(struct, name, refiner) {\n  return new Struct({ ...struct,\n\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n\n      for (const failure of failures) {\n        yield { ...failure,\n          refinement: name\n        };\n      }\n    }\n\n  });\n}\n\nexport { Struct, StructError, any, array, assert, assign, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.es.js.map\n"],"names":["exports","_O","Jq","KB","u8","cv","Ik","A9","n_","gM","buffer_1","__webpack_require__","checkUint8Array","b","Uint8Array","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","OffsetLayout","layout","UInt","UIntBE","decode","encode","src","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","divmodInt64","hi32","Math","floor","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearInt64","readInt32LE","writeInt32LE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","undefined","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","module","assert","val","msg","inherits","ctor","superCtor","super_","TempCtor","BN","number","base","endian","isBN","negative","words","red","_init","wordSize","window","parseHex4Bits","string","index","c","charCodeAt","parseHexByte","lowerBound","r","parseBase","str","end","mul","len","min","move","num","max","left","right","cmp","_initNumber","_initArray","replace","_parseHex","_parseBase","toArray","ceil","j","w","off","_strip","parseLength","limbLen","limbPow","total","mod","imuln","_iaddn","pow","copy","_move","clone","_expand","size","_normSign","Symbol","for","inspect","zeros","groupSizes","groupBases","smallMulTo","self","out","a","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modrn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","res","allocUnsafe","_toArrayLikeLE","position","_toArrayLikeBE","clz32","_countBits","t","_zeroBits","bitLength","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","add","sub","comb10MulTo","mid","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","FFTM","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","s","rtwdf","cos","PI","itwdf","sin","p","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","n","m","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","mulp","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","isNegNum","muln","sqr","isqr","toBitArray","q","iushln","carryMask","newCarry","ishln","iushrn","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","andln","modn","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","strip","input","output","outLen","prev","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","__createBinding","k2","defineProperty","enumerable","get","__setModuleDefault","__decorate","decorators","target","key","desc","d","arguments","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","result","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","ResolvedTextDecoder","TextDecoder","textDecoder","fatal","default","Error","message","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","buf","alloc","maybeResize","concat","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","writeU128","writeU256","writeU512","subarray","writeString","writeFixedArray","array","writeArray","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","apply","RangeError","code","indexOf","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","charAt","toUpperCase","serializeField","schema","fieldType","writer","item","kind","type","forEach","serializeStruct","error","obj","borshSerialize","structSchema","map","field","deserializeField","reader","arr","option","Map","set","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","basex","base64","ieee754","customInspectSymbol","createBuffer","setPrototypeOf","arg","encodingOrOffset","fromString","isEncoding","actual","ArrayBuffer","isView","fromArrayView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","SharedArrayBuffer","valueOf","fromObject","isBuffer","checked","data","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","hexSliceLookupTable","utf8Slice","asciiSlice","String","fromCharCode","latin1Slice","fromByteArray","utf16leSlice","bytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","lW","h2","TYPED_ARRAY_SUPPORT","typedArraySupport","proto","foo","console","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","list","pos","swap16","swap32","swap64","toLocaleString","equals","trim","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","remaining","hexWrite","strLen","parsed","parseInt","substr","blitBuffer","asciiToBytes","byteArray","utf16leToBytes","units","_arr","newBuf","readUintLE","readUintBE","readUint8","readUint16LE","readUint16BE","readUint32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","maxBytes","writeUintBE","writeUint8","writeUint16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","writable","configurable","stack","addNumericalSeparator","range","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","TypeError","received","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","BufferBigIntNotDefined","oU","reversed","reverse","hex","k$","padStart","uuid","v4","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","request","method","params","id","callback","isBatch","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","filter","jsonrpc","_interopRequireDefault","K","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","Client","_CommonClient","hasNativeReflectConstruct","_super","_isNativeReflectConstruct","construct","sham","Proxy","Super","NewTarget","address","_ref","_ref$autoconnect","autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","max_reconnects","generate_request_id","_client","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_login","_listMethods","_subscribe","_unsubscribe","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","socket","timeout","ws_opts","_this2","Promise","resolve","reject","send","promise","setTimeout","mark","_callee","resp","wrap","_context","sent","abrupt","stop","_x","_callee2","_context2","_this3","_callee3","event","_context3","_x2","_callee4","_context4","_x3","close","_this4","addEventListener","emit","notification","listeners","keys","then","clearTimeout","_ref2","reason","EventEmitter","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","listener","copyProps","SafeBuffer","SlowBuffer","ProviderSolanaBase","cross_inpage_provider_core_dist","BX","props","providerName","cross_inpage_provider_types_dist","U","solana","bridgeRequest","encodeTransaction","bs58","transaction","requireAllSignatures","decodeSignedTransaction","txByte","index_browser_esm","YW","GS","__awaiter","thisArg","_arguments","P","fulfilled","step","rejected","done","adopt","PROVIDER_EVENTS","ProviderSolana","bridge","dist","R","isPhantom","isSolflare","isGlow","_publicKey","_registerEvents","publicKey","isConnected","_handleDisconnected","on","message_low_level","payload","accountChanged","_handleAccountChange","_callBridge","postMessage","param","connect","nh","_handleConnected","isConnectionStatusChanged","connectionStatus","disconnect","isAccountsChanged","account","toBase58","accounts","signAndSendTransaction","_handleSignAndSendTransaction","signTransaction","_handleSignTransaction","signAllTransactions","transactions","_handleSignAllTransactions","signMessage","display","_handleSignMessage","signature","isSafeInteger","lengths","__webpack_exports__","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","SHA2","_utils_js__WEBPACK_IMPORTED_MODULE_1__","kb","padOffset","isLE","view","GL","update","_assert_js__WEBPACK_IMPORTED_MODULE_0__","ZP","O0","take","dataView","process","roundClean","digestInto","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","digest","destroy","_cloneInto","to","U32_MASK64","fromBig","le","toBig","lst","Ah","Uint32Array","Al","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","HMAC","_key","iHash","pad","oHash","getPrototypeOf","hmac","Chi","Maj","SHA256_K","IV","SHA256_W","SHA256","_sha2_js__WEBPACK_IMPORTED_MODULE_0__","F","G","H","getUint32","W15","W2","s0","np","s1","sigma1","T1","sigma0","T2","sha256","hE","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","SHA3_IOTA_H","SHA3_IOTA_L","_u64_js__WEBPACK_IMPORTED_MODULE_1__","rotlH","rotlL","Keccak","_utils_js__WEBPACK_IMPORTED_MODULE_2__","suffix","enableXOF","rounds","posOut","state","state32","keccak","keccakP","idx1","idx0","B0","B1","Th","Tl","curH","curL","finish","writeInto","bufferOut","xofInto","xof","gen","keccak_256","genShake","K$","opts","dkLen","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha512","crypto","u32","createView","DataView","rotr","toBytes","TextEncoder","Hash","wrapConstructor","hashConstructor","hashC","wrapConstructorWithOpts","hashCons","_sha256Sync","_hmacSha256Sync","_3n","_8n","CURVE","freeze","Gx","Gy","beta","weistrass","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","fromAffine","Point","toAffineBatch","points","toInv","invertBatch","nums","scratch","lastMultiplied","inverted","invert","reduceRight","toAffine","normalizeZ","other","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","ZERO","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","k1neg","k1","k2neg","splitScalarEndo","k1p","k2p","precomputeWindow","W","windows","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","f","windowSize","maxNumber","shiftBy","wbits","pr","cached","multiply","point","fake","f1p","f2p","invZ","iz2","iz1","iz3","ax","ay","zz","WeakMap","_setWindowSize","delete","hasEvenY","fromCompressedHex","isShort","bytesToNumber","isValidFieldElement","y2","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b11","b22","b44","b88","b176","b220","b223","t1","t2","pow2","isYOdd","isFirstByteOdd","assertValidity","fromUncompressedHex","fromHex","ensureBytes","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","recovery","truncateHash","normalizeSignature","Signature","fromDER","fromCompact","prefix","numTo32bStr","u1","u2","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","hexToBytes","toHex","toHexX","toRawX","aP","bQ","sliceDER","parseDERInt","bytesToHex","hexToNumber","parseDERSignature","sBytes","rBytesLeft","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","concatBytes","arrays","every","hexes","uint8a","POW_2_256","numTo32b","hexByte","byte","isNaN","power","modulo","divNearest","ENDO","POW_2_128","c1","c2","HmacDrbg","counter","utils","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","getPublicKey","bits2int","signSync","privKey","sig","initSigArgs","extraEntropy","h1","seedArgs","bits2octets","z1","z2","randomBytes","drbg","kmdToSig","kBytes","finalizeSig","recSig","canonical","der","recovered","hashed","node","crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache","crypto__WEBPACK_IMPORTED_MODULE_0__","web","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","bytesLength","getRandomValues","randomPrivateKey","messages","subtle","createHash","ckey","importKey","sign","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","precompute","defineProperties","StructError","failure","failures","rest","path","_cached","isObject","print","toFailures","context","struct","iterator","toFailure","branch","refinement","run","coerce","coercer","valid","validator","entries","ts","Set","refiner","Struct","validate","is","tuples","tuple","shiftIterator","define","any","Element","boolean","Class","literal","constant","description","nullable","optional","record","Key","Value","Elements","Never","Structs","S","unknown","condition"],"sourceRoot":""}