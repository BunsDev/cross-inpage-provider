{"version":3,"file":"static/chunks/4762.d836ba79c5648baf.js","mappings":"+LAce,SAASA,GAAgB,CAsBtC,MArBAC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACdC,OAAOC,WAAW,CAAG,IAAIC,EAAAA,EAAcA,CAAC,CACtCC,YAAaH,OAAOI,MAAM,CAC1BC,gBAAiB,OACjBC,cAAe,QACfC,QAAS,gBACTC,eAAc,SAACC,CAAO,CAAE,CACtB,IAAAC,EAA2BD,EAAQE,IAAI,CAA/BC,EAAMF,EAANE,MAAM,CAEd,GADAC,QAAQC,GAAG,CAAC,wBAAyB,CAAEF,OAAAA,EAAQG,OADzBL,EAANK,MAAM,GAElBH,OAAAA,EACF,MAAO,mBAET,IAAIA,UAAAA,EACF,MAAO,CAAEI,QAAS,mBAAoB,CAExC,IAAIJ,UAAAA,EACF,MAAM,MAAU,iCAClB,CAEJ,EACF,EAAG,EAAE,EAEHK,CAAAA,EAAAA,EAAAA,GAAAA,EAAA,OAAAC,SACK,CAAC,KAAM,QAAS,QAAQ,CAACC,GAAG,CAAC,SAACP,CAAM,CAAEQ,CAAK,CAAK,CAC/C,MACEC,CAAAA,EAAAA,EAAAA,IAAAA,EAAA,UAEEC,QAAS,UAAM,CAERC,CAAAA,EAAAA,EAAAA,CAAAA,EACH,CACEX,OAAAA,EACAG,OAAQ,CAAC,CAAEK,MAAAA,CAAM,EACnB,EACApB,OAAOC,WACT,CACF,EAAEiB,SAAA,CACH,eACcN,EAAO,IACtB,EAbOA,EAeX,EAAE,EAGV,wECvDA,SAAsBW,EAAUC,CAAA,CAAAC,CAAA,SAAAC,EAAAC,KAAA,MAAAC,UAAA,CAgB/B,SAAAF,GAAA,OAAAA,CAAAA,EAAAG,CAAAA,EAAAA,EAAAA,CAAAA,EAhBM,UAAAnB,CAAA,CAELoB,CAAuB,CACR,KAFblB,EAAMF,EAANE,MAAM,CAAEG,EAAML,EAANK,MAAM,CAGhB,GAAI,CACF,IAAMgB,EAAM,MAASD,IAAM,EAANA,EAAM,OAANA,EAAQE,OAAO,CAAC,CACnCC,MAAO,gBACPtB,KAAM,CACJC,OAAAA,EACAG,OAAAA,CACF,CACF,EAAE,CACFF,QAAQC,GAAG,CAAC,cAAeF,EAAQ,QAASmB,EAC9C,CAAE,MAAOG,EAAG,CACVrB,QAAQsB,KAAK,CAAC,+BAAgCvB,EAAQ,QAASsB,EACjE,CACF,IAACP,KAAA,MAAAC,UAAA","sources":["webpack://_N_E/./components/iframe/IFrameExample.tsx","webpack://_N_E/./components/iframe/utils.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable @typescript-eslint/restrict-plus-operands,@typescript-eslint/ban-ts-comment */\nimport React from 'react';\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport { JsBridgeIframe } from '@onekeyfe/cross-inpage-provider-core'\nimport { IJsonRpcRequest } from '@onekeyfe/cross-inpage-provider-types'\nimport { sendMethod } from './utils'\n\ndeclare global {\n  interface Window {\n    frameBridge: JsBridgeIframe;\n    hostBridge: JsBridgeIframe;\n  }\n}\n\nexport default function IFrameExample() {\n  useEffect(() => {\n    window.frameBridge = new JsBridgeIframe({\n      remoteFrame: window.parent,\n      remoteFrameName: 'HOST',\n      selfFrameName: 'FRAME',\n      channel: 'onekey-js-sdk',\n      receiveHandler(payload) {\n        const { method, params } = payload.data as IJsonRpcRequest;\n        console.log('receiveHandler >>>>> ', { method, params });\n        if (method === 'hi') {\n          return 'from FRAME: 99999';\n        }\n        if (method === 'hello') {\n          return { message: 'from FRAME: 88888' };\n        }\n        if (method === 'error') {\n          throw new Error('from FRAME: something is wrong');\n        }\n      },\n    });\n  }, []);\n  return (\n    <div>\n        {['hi', 'hello', 'error'].map((method, index) => {\n          return (\n            <button\n              key={method}\n              onClick={() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                void sendMethod(\n                  {\n                    method,\n                    params: [{ index }],\n                  },\n                  window.frameBridge,\n                );\n              }}\n            >\n              sendToHost ({method})\n            </button>\n          );\n        })}\n    </div>\n  );\n}\n","import React from 'react';\nimport { JsBridgeIframe } from '@onekeyfe/cross-inpage-provider-core';\nimport { IJsonRpcRequest } from '@onekeyfe/cross-inpage-provider-types';\n\nexport async function sendMethod(\n  { method, params }: IJsonRpcRequest,\n  bridge?: JsBridgeIframe,\n): Promise<void> {\n  try {\n    const result = await bridge?.request({\n      scope: '$hardware_sdk',\n      data: {\n        method,\n        params,\n      },\n    });\n    console.log('result >>>>', method, ' --> ', result);\n  } catch (e) {\n    console.error('bridge send ERROR response: ', method, ' --> ', e);\n  }\n}\n"],"names":["IFrameExample","useEffect","window","frameBridge","JsBridgeIframe","remoteFrame","parent","remoteFrameName","selfFrameName","channel","receiveHandler","payload","_ref","data","method","console","log","params","message","_jsx","children","map","index","_jsxs","onClick","sendMethod","_x","_x2","_sendMethod","apply","arguments","_asyncToGenerator","bridge","result","request","scope","e","error"],"sourceRoot":""}