{"version":3,"file":"static/chunks/5591.c9f52439b71c8c8a.js","mappings":"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","sources":["webpack://_N_E/./components/aptos/AptosExample.tsx","webpack://_N_E/./components/aptos/dapps.config.ts","webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/./node_modules/@onekeyfe/extension-bridge-injected/dist/JsBridgeExtInjected.js","webpack://_N_E/./node_modules/@onekeyfe/extension-bridge-injected/dist/index.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-aptos-provider/dist/ProviderAptosBase.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-aptos-provider/dist/OnekeyAptosProvider.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-aptos-provider/dist/OnekeyMartianAptosProvider.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-aptos-provider/dist/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { ProviderAptos } from '@onekeyfe/onekey-aptos-provider';\n\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from './dapps.config';\n\ndeclare global {\n  interface Window {\n    // @ts-expect-error\n    aptos: ProviderAptos;\n  }\n}\n\nconst useProvider = () => {\n  const [provider, setProvider] = useState<ProviderAptos>();\n\n  useEffect(() => {\n    const injectedProvider = window.aptos as ProviderAptos;\n    const aptosProvider =\n      injectedProvider ||\n      new ProviderAptos({\n        // use mock api provider bridge for development\n        // bridge: new CustomBridge(),\n      });\n    setProvider(aptosProvider);\n  }, []);\n\n  return provider;\n};\n\nexport default function App() {\n  const provider = useProvider();\n\n  const [network, setNetwork] = useState<string>('');\n  const [connected, setConnected] = useState<boolean>(false);\n  const [address, setAddress] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    // provider.connect().catch((err) => {\n    //     err;\n    //     // fail silently\n    // });\n\n    provider.on('connect', (address: string) => {\n      setConnected(true);\n      setAddress(address);\n      console.log(`aptos.on [connect] ${address}`);\n    });\n    provider.on('disconnect', () => {\n      setAddress(null);\n      setConnected(false);\n      console.log('aptos.on [disconnect] 👋');\n    });\n    provider.on('networkChange', (network: string) => {\n      setNetwork(network);\n      console.log(`aptos.on [networkChange] ${network}`);\n    });\n    provider.on('accountChanged', (address: string) => {\n      setAddress(address);\n      setConnected(address ? true : false);\n      console.log(`aptos.on [accountChange] ${address}`);\n    });\n    provider.onNetworkChange((network: string) => {\n      setNetwork(network);\n      console.log(`aptos [onNetworkChange] ${network}`);\n    });\n    provider.onAccountChange((address: string | null) => {\n      setAddress(address);\n      if (address) {\n        setConnected(true);\n        console.log(`aptos [onAccountChange] Switched account to ${address}`);\n      } else {\n        console.log('aptos [onAccountChange] Switched unknown account');\n        // In this case, dapps could not to anything, or,\n        // Only re-connecting to the new account if it is trusted\n        // provider.connect({ onlyIfTrusted: true }).catch((err) => {\n        //   // fail silently\n        // });\n        // Or, always trying to reconnect\n        provider\n          .connect()\n          .then(() => console.log('[accountChanged] Reconnected successfully'))\n          .catch((err: Error) => {\n            console.log(`[accountChanged] Failed to re-connect: ${err.message}`);\n          });\n      }\n    });\n    return () => {\n      void provider.disconnect();\n    };\n  }, [provider]);\n\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const connectWallet = async () => {\n    try {\n      const account = await provider.connect();\n      const network = await provider.network();\n\n      setAddress(account.address);\n      setNetwork(network);\n      setConnected(true);\n\n      console.log('[connectWallet] account', account, network);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] connect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    try {\n      await provider.disconnect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] disconnect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const signAndSubmitTransaction = async () => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const res = await provider.signAndSubmitTransaction({\n      arguments: [address, '100000'],\n      function: '0x1::coin::transfer',\n      type: 'entry_function_payload',\n      type_arguments: ['0x1::aptos_coin::AptosCoin'],\n    });\n    console.log('[signTransaction]', res);\n  };\n\n  const signTransaction = async () => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const res = await provider.signTransaction({\n      arguments: [address, '100000'],\n      function: '0x1::coin::transfer',\n      type: 'entry_function_payload',\n      type_arguments: ['0x1::aptos_coin::AptosCoin'],\n    });\n    console.log('[signTransaction]', res);\n  };\n\n  const signMessage = async () => {\n    const res = await provider.signMessage({\n      address: false,\n      application: true,\n      chainId: true,\n      message: 'This is a sample message',\n      nonce: 12345,\n    });\n    console.log('[signMessage]', res);\n  };\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n      {!provider && (\n        <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n          Install OneKey Extension →\n        </a>\n      )}\n      <main>\n        {provider && connected ? (\n          <>\n            <div>\n              <pre>Network: {network}</pre>\n              <pre>Connected as: {address}</pre>\n            </div>\n            <button onClick={signAndSubmitTransaction}>Sign&Send Transaction</button>\n            <button onClick={signTransaction}>Sign Transaction </button>\n            <button onClick={signMessage}>Sign Message</button>\n            <button onClick={() => disconnectWallet()}>Disconnect</button>\n          </>\n        ) : (\n          <>\n            <button onClick={() => connectWallet()}>Connect Wallet</button>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n","export const dapps = [\n  {\n    name: 'SEAM',\n    url: 'https://app.seam.money/',\n  },\n  {\n    name: 'Aptos Names',\n    url: 'https://www.aptosnames.com/',\n  },\n  {\n    name: 'Liquid Swap',\n    url: 'https://liquidswap.com/#/',\n  },\n];\n","import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} ↗\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { fakeDebugLogger, consts } from '@onekeyfe/cross-inpage-provider-core';\nimport { JsBridgeBase, injectedProviderReceiveHandler, injectJsBridge, } from '@onekeyfe/cross-inpage-provider-core';\nconst { JS_BRIDGE_MESSAGE_DIRECTION, JS_BRIDGE_MESSAGE_EXT_CHANNEL } = consts;\nfunction getOrCreateExtInjectedJsBridge(options = {}) {\n    // create ext bridge by default\n    const bridgeCreator = () => new JsBridgeExtInjected(Object.assign(Object.assign({}, options), { receiveHandler: injectedProviderReceiveHandler }));\n    const bridge = injectJsBridge(bridgeCreator);\n    return bridge;\n}\nlet postMessageListenerAdded = false;\nfunction setupPostMessageListener(options = {}) {\n    const debugLogger = options.debugLogger || fakeDebugLogger;\n    if (postMessageListenerAdded) {\n        return;\n    }\n    postMessageListenerAdded = true;\n    // - receive\n    // #### content-script -> injected\n    window.addEventListener('message', (event) => {\n        var _a, _b;\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n        const eventData = event.data;\n        // only accept extension messages\n        if (eventData.channel === JS_BRIDGE_MESSAGE_EXT_CHANNEL &&\n            eventData.direction === JS_BRIDGE_MESSAGE_DIRECTION.HOST_TO_INPAGE) {\n            debugLogger.extInjected('onWindowPostMessage', eventData);\n            const payload = eventData.payload;\n            const jsBridge = (_a = options.bridge) !== null && _a !== void 0 ? _a : (_b = window === null || window === void 0 ? void 0 : window.$onekey) === null || _b === void 0 ? void 0 : _b.jsBridge;\n            if (jsBridge) {\n                jsBridge.receive(payload);\n            }\n        }\n    }, false);\n}\nclass JsBridgeExtInjected extends JsBridgeBase {\n    constructor(config) {\n        super(config);\n        this.sendAsString = false;\n        this.isInjected = true;\n        // receive message\n        setupPostMessageListener({\n            debugLogger: this.debugLogger,\n            bridge: this,\n        });\n    }\n    // send message\n    sendPayload(payloadObj) {\n        window.postMessage({\n            channel: JS_BRIDGE_MESSAGE_EXT_CHANNEL,\n            direction: JS_BRIDGE_MESSAGE_DIRECTION.INPAGE_TO_HOST,\n            payload: payloadObj,\n        });\n    }\n}\nexport { JsBridgeExtInjected, getOrCreateExtInjectedJsBridge };\n","export * from './JsBridgeExtInjected';\n","import { IInjectedProviderNames } from '@onekeyfe/cross-inpage-provider-types';\nimport { ProviderBase } from '@onekeyfe/cross-inpage-provider-core';\nclass ProviderAptosBase extends ProviderBase {\n    constructor(props) {\n        super(props);\n        this.providerName = IInjectedProviderNames.aptos;\n    }\n    request(data) {\n        return this.bridgeRequest(data);\n    }\n}\nexport { ProviderAptosBase };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getOrCreateExtInjectedJsBridge } from '@onekeyfe/extension-bridge-injected';\nimport { ProviderAptosBase } from './ProviderAptosBase';\nimport { web3Errors } from '@onekeyfe/cross-inpage-provider-errors';\nconst PROVIDER_EVENTS = {\n    'connect': 'connect',\n    'disconnect': 'disconnect',\n    'accountChanged': 'accountChanged',\n    'networkChange': 'networkChange',\n    'message_low_level': 'message_low_level',\n};\nfunction isWalletEventMethodMatch({ method, name }) {\n    return method === `wallet_events_${name}`;\n}\nclass ProviderAptos extends ProviderAptosBase {\n    constructor(props) {\n        super(Object.assign(Object.assign({}, props), { bridge: props.bridge || getOrCreateExtInjectedJsBridge({ timeout: props.timeout }) }));\n        this._account = null;\n        this.aptosProviderType = 'petra';\n        this._registerEvents();\n    }\n    get publicKey() {\n        var _a, _b;\n        return (_b = (_a = this._account) === null || _a === void 0 ? void 0 : _a.publicKey) !== null && _b !== void 0 ? _b : null;\n    }\n    _registerEvents() {\n        window.addEventListener('onekey_bridge_disconnect', () => {\n            this._handleDisconnected();\n        });\n        this.on(PROVIDER_EVENTS.message_low_level, (payload) => {\n            if (!payload)\n                return;\n            const { method, params } = payload;\n            if (isWalletEventMethodMatch({ method, name: PROVIDER_EVENTS.accountChanged })) {\n                this._handleAccountChange(params);\n            }\n            if (isWalletEventMethodMatch({ method, name: PROVIDER_EVENTS.networkChange })) {\n                this._handleNetworkChange(params);\n            }\n        });\n    }\n    _callBridge(params) {\n        params.aptosProviderType = this.aptosProviderType;\n        return this.bridgeRequest(params);\n    }\n    _handleConnected(account, options = { emit: true }) {\n        var _a;\n        this._account = account;\n        if (options.emit && this.isConnectionStatusChanged('connected')) {\n            this.connectionStatus = 'connected';\n            const address = (_a = account === null || account === void 0 ? void 0 : account.address) !== null && _a !== void 0 ? _a : null;\n            this.emit('connect', address);\n            this.emit('accountChanged', address);\n        }\n    }\n    _handleDisconnected(options = { emit: true }) {\n        this._account = null;\n        if (options.emit && this.isConnectionStatusChanged('disconnected')) {\n            this.connectionStatus = 'disconnected';\n            this.emit('disconnect');\n            this.emit('accountChanged', null);\n        }\n    }\n    isAccountsChanged(account) {\n        var _a;\n        return (account === null || account === void 0 ? void 0 : account.address) !== ((_a = this._account) === null || _a === void 0 ? void 0 : _a.address);\n    }\n    // trigger by bridge account change event\n    _handleAccountChange(payload) {\n        const account = payload;\n        if (this.isAccountsChanged(account)) {\n            this.emit('accountChanged', (account === null || account === void 0 ? void 0 : account.address) || null);\n        }\n        if (!account) {\n            this._handleDisconnected();\n            return;\n        }\n        this._handleConnected(account, { emit: false });\n    }\n    isNetworkChanged(network) {\n        return this._network === undefined || network !== this._network;\n    }\n    _handleNetworkChange(payload) {\n        const network = payload;\n        if (this.isNetworkChanged(network)) {\n            this.emit('networkChange', network || null);\n        }\n        this._network = network;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._account) {\n                return Promise.resolve(this._account);\n            }\n            const result = yield this._callBridge({\n                method: 'connect',\n                params: undefined,\n            });\n            if (!result)\n                throw web3Errors.provider.unauthorized();\n            this._handleConnected(result, { emit: true });\n            return result;\n        });\n    }\n    isConnected() {\n        return this._account !== null;\n    }\n    account() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this._callBridge({\n                method: 'account',\n                params: undefined,\n            });\n            if (!res)\n                throw web3Errors.provider.unauthorized();\n            return Promise.resolve(res);\n        });\n    }\n    signAndSubmitTransaction(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this._callBridge({\n                method: 'signAndSubmitTransaction',\n                params: transactions,\n            });\n            if (!res)\n                throw web3Errors.provider.unauthorized();\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return JSON.parse(res);\n        });\n    }\n    signTransaction(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this._callBridge({\n                method: 'signTransaction',\n                params: transactions,\n            });\n            if (!res)\n                throw web3Errors.provider.unauthorized();\n            return new Uint8Array(Buffer.from(res, 'hex'));\n        });\n    }\n    signMessage(payload) {\n        return this._callBridge({\n            method: 'signMessage',\n            params: payload,\n        });\n    }\n    network() {\n        return this._callBridge({\n            method: 'network',\n            params: undefined,\n        });\n    }\n    getNetworkURL() {\n        return this._callBridge({\n            method: 'getNetworkURL',\n            params: undefined,\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._callBridge({\n                method: 'disconnect',\n                params: void 0,\n            });\n            this._handleDisconnected();\n        });\n    }\n    onNetworkChange(listener) {\n        return super.on(PROVIDER_EVENTS.networkChange, listener);\n    }\n    onAccountChange(listener) {\n        return super.on(PROVIDER_EVENTS.accountChanged, listener);\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n}\nexport { ProviderAptos };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getOrCreateExtInjectedJsBridge } from '@onekeyfe/extension-bridge-injected';\nimport { ProviderAptos } from './OnekeyAptosProvider';\nimport { web3Errors } from '@onekeyfe/cross-inpage-provider-errors';\nclass ProviderAptosMartian extends ProviderAptos {\n    constructor(props) {\n        super(Object.assign(Object.assign({}, props), { bridge: props.bridge || getOrCreateExtInjectedJsBridge({ timeout: props.timeout }) }));\n        this.isMartian = true;\n        window.dispatchEvent(new Event('martian#initialized'));\n    }\n    get publicKey() {\n        var _a, _b;\n        return (_b = (_a = this._account) === null || _a === void 0 ? void 0 : _a.publicKey) !== null && _b !== void 0 ? _b : null;\n    }\n    _callMartianBridge(params) {\n        params.aptosProviderType = this.aptosProviderType;\n        return this.bridgeRequest(params);\n    }\n    signAndSubmitTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof transaction === 'string') {\n                return yield this._callMartianBridge({\n                    method: 'martianSignAndSubmitTransaction',\n                    params: transaction,\n                });\n            }\n            else {\n                const res = yield this._callMartianBridge({\n                    method: 'signAndSubmitTransaction',\n                    params: transaction,\n                });\n                if (!res)\n                    throw web3Errors.provider.unauthorized();\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return JSON.parse(res);\n            }\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof transaction === 'string') {\n                return this._callMartianBridge({\n                    method: 'martianSignTransaction',\n                    params: transaction,\n                });\n            }\n            else {\n                const res = yield this._callMartianBridge({\n                    method: 'signTransaction',\n                    params: transaction,\n                });\n                if (!res)\n                    throw web3Errors.provider.unauthorized();\n                return new Uint8Array(Buffer.from(res, 'hex'));\n            }\n        });\n    }\n    signGenericTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'signGenericTransaction',\n                params: {\n                    func: transaction.func,\n                    args: transaction.args,\n                    type_args: transaction.type_args,\n                },\n            });\n        });\n    }\n    generateSignAndSubmitTransaction(sender, payload, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const txn = yield this.generateTransaction(sender, payload, options);\n            const txnHash = yield this.signAndSubmitTransaction(txn);\n            return txnHash;\n        });\n    }\n    createCollection(name, description, uri) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'createCollection',\n                // @ts-expect-error\n                params: {\n                    name,\n                    description,\n                    uri,\n                },\n            });\n        });\n    }\n    createToken(collectionName, name, description, supply, uri, max, royalty_payee_address, royalty_points_denominator, royalty_points_numerator, property_keys, property_values, property_types) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'createToken',\n                // @ts-expect-error\n                params: {\n                    collectionName,\n                    name,\n                    description,\n                    supply,\n                    uri,\n                    max,\n                    royalty_payee_address,\n                    royalty_points_denominator,\n                    royalty_points_numerator,\n                    property_keys,\n                    property_values,\n                    property_types,\n                },\n            });\n        });\n    }\n    // rpc\n    generateTransaction(sender, payload, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'generateTransaction',\n                // @ts-expect-error\n                params: {\n                    sender,\n                    payload,\n                    options,\n                },\n            });\n        });\n    }\n    _convertStringToUint8Array(array) {\n        return new Uint8Array(array.split(',').map((item) => parseInt(item, 10)));\n    }\n    _convertMaybeHexStringTostring(hexString) {\n        if (typeof hexString === 'string') {\n            return hexString;\n        }\n        else {\n            return hexString.toString();\n        }\n    }\n    _convertAnyNumberToString(number) {\n        if (typeof number === 'string') {\n            return number;\n        }\n        else {\n            return number.toString();\n        }\n    }\n    submitTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const txraw = typeof transaction === 'string' ? this._convertStringToUint8Array(transaction) : transaction;\n            return this._callMartianBridge({\n                method: 'submitTransaction',\n                params: Buffer.from(txraw).toString('hex'),\n            });\n        });\n    }\n    getTransactions(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getTransactions',\n                params: Object.assign(Object.assign({}, query), { start: (query === null || query === void 0 ? void 0 : query.start) ? this._convertAnyNumberToString(query.start) : undefined }),\n            });\n        });\n    }\n    getTransaction(txnHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getTransaction',\n                params: txnHash,\n            });\n        });\n    }\n    getAccountTransactions(accountAddress, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getAccountTransactions',\n                // @ts-expect-error\n                params: {\n                    accountAddress: this._convertMaybeHexStringTostring(accountAddress),\n                    query: Object.assign(Object.assign({}, query), { start: (query === null || query === void 0 ? void 0 : query.start) ? this._convertAnyNumberToString(query.start) : undefined }),\n                },\n            });\n        });\n    }\n    getAccountResources(accountAddress, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getAccountResources',\n                // @ts-expect-error\n                params: {\n                    accountAddress: this._convertMaybeHexStringTostring(accountAddress),\n                    query: Object.assign(Object.assign({}, query), { ledgerVersion: (query === null || query === void 0 ? void 0 : query.ledgerVersion)\n                            ? this._convertAnyNumberToString(query.ledgerVersion)\n                            : undefined }),\n                },\n            });\n        });\n    }\n    getAccount(accountAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getAccount',\n                params: this._convertMaybeHexStringTostring(accountAddress),\n            });\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getChainId',\n                params: undefined,\n            });\n        });\n    }\n    getLedgerInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._callMartianBridge({\n                method: 'getLedgerInfo',\n                params: undefined,\n            });\n        });\n    }\n}\nexport { ProviderAptosMartian };\n","export * from './OnekeyAptosProvider';\nexport * from './OnekeyMartianAptosProvider';\nexport * from './ProviderAptosBase';\n"],"names":["useProvider","_useState","useState","_useState2","_slicedToArray","provider","setProvider","useEffect","injectedProvider","aptos","ProviderAptos","App","_ref","_ref2","_ref3","_ref4","_ref5","_useState3","_useState4","network","setNetwork","_useState5","_useState6","connected","setConnected","_useState7","_useState8","address","setAddress","on","console","log","onNetworkChange","onAccountChange","connect","then","catch","err","message","disconnect","_jsx","children","connectWallet","_asyncToGenerator","account","warn","JSON","stringify","apply","arguments","disconnectWallet","signAndSubmitTransaction","function","type","type_arguments","signTransaction","signMessage","application","chainId","nonce","_jsxs","DAppList","dapps","target","href","_Fragment","onClick","name","url","props","className","styles","map","dapp","JS_BRIDGE_MESSAGE_DIRECTION","JS_BRIDGE_MESSAGE_EXT_CHANNEL","dist","vH","getOrCreateExtInjectedJsBridge","options","bridgeCreator","JsBridgeExtInjected","Object","assign","receiveHandler","gZ","bridge","Pk","postMessageListenerAdded","ZN","constructor","config","sendAsString","isInjected","setupPostMessageListener","debugLogger","go","window","addEventListener","_a","_b","event","source","eventData","data","channel","direction","HOST_TO_INPAGE","extInjected","payload","jsBridge","$onekey","receive","sendPayload","payloadObj","postMessage","INPAGE_TO_HOST","ProviderAptosBase","cross_inpage_provider_core_dist","BX","providerName","cross_inpage_provider_types_dist","U","request","bridgeRequest","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","adopt","PROVIDER_EVENTS","isWalletEventMethodMatch","method","R","timeout","_account","aptosProviderType","_registerEvents","publicKey","_handleDisconnected","message_low_level","params","accountChanged","_handleAccountChange","networkChange","_handleNetworkChange","_callBridge","_handleConnected","emit","isConnectionStatusChanged","connectionStatus","isAccountsChanged","isNetworkChanged","undefined","_network","cross_inpage_provider_errors_dist","b$","unauthorized","isConnected","res","transactions","parse","Uint8Array","Buffer","from","getNetworkURL","listener","args","OnekeyMartianAptosProvider_awaiter","ProviderAptosMartian","isMartian","dispatchEvent","Event","_callMartianBridge","transaction","OnekeyMartianAptosProvider_Buffer","signGenericTransaction","func","type_args","generateSignAndSubmitTransaction","sender","txn","generateTransaction","txnHash","createCollection","description","uri","createToken","collectionName","supply","max","royalty_payee_address","royalty_points_denominator","royalty_points_numerator","property_keys","property_values","property_types","_convertStringToUint8Array","array","split","parseInt","item","_convertMaybeHexStringTostring","hexString","toString","_convertAnyNumberToString","number","submitTransaction","txraw","getTransactions","query","start","getTransaction","getAccountTransactions","accountAddress","getAccountResources","ledgerVersion","getAccount","getChainId","getLedgerInfo"],"sourceRoot":""}