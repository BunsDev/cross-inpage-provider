{"version":3,"file":"static/chunks/3598.bffc3e781296dd03.js","mappings":"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","sources":["webpack://_N_E/./components/aptos/dapps.config.ts","webpack://_N_E/./components/aptosMartian/AptosExample.tsx","webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/tweetnacl|crypto","webpack://_N_E/<anon>"],"sourcesContent":["export const dapps = [\n  {\n    name: 'SEAM',\n    url: 'https://app.seam.money/',\n  },\n  {\n    name: 'Aptos Names',\n    url: 'https://www.aptosnames.com/',\n  },\n  {\n    name: 'Liquid Swap',\n    url: 'https://liquidswap.com/#/',\n  },\n];\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { ProviderAptosMartian } from '@onekeyfe/onekey-aptos-provider';\nimport { random } from 'lodash';\n\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from '../aptos/dapps.config';\nimport { HexString, TxnBuilderTypes, BCS } from \"aptos\";\nimport { TxnPayload } from '@onekeyfe/onekey-aptos-provider/dist/types';\n\ndeclare global {\n  interface Window {\n    // @ts-expect-error\n    martian: ProviderAptosMartian;\n  }\n}\n\nconst useProvider = () => {\n  const [provider, setProvider] = useState<ProviderAptosMartian>();\n\n  useEffect(() => {\n    console.log('useProvider', window.martian);\n\n    const injectedProvider = window.martian as ProviderAptosMartian;\n    const aptosProvider =\n      injectedProvider ||\n      new ProviderAptosMartian({\n        // use mock api provider bridge for development\n        // bridge: new CustomBridge(),\n      });\n    setProvider(aptosProvider);\n  }, []);\n\n  return provider;\n};\n\nexport default function App() {\n  const provider = useProvider();\n\n  const [network, setNetwork] = useState<string>('');\n  const [connected, setConnected] = useState<boolean>(false);\n  const [address, setAddress] = useState<string | null>(null);\n  const [collectionName, setCollectionName] = useState<string>('OneKey-Collection');\n  const [nftTokenName, setNftTokenName] = useState<string>('OneKey-NFT-1');\n\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    // provider.connect().catch((err) => {\n    //     err;\n    //     // fail silently\n    // });\n\n    provider.onNetworkChange((network: string) => {\n      setNetwork(network);\n      console.log(`aptos [onNetworkChange] ${network}`);\n    });\n    provider.onAccountChange((address: string | null) => {\n      setAddress(address);\n      if (address) {\n        setConnected(true);\n        console.log(`aptos [onAccountChange] Switched account to ${address}`);\n      } else {\n        setConnected(false);\n        console.log('aptos [onAccountChange] Switched unknown account');\n        // In this case, dapps could not to anything, or,\n        // Only re-connecting to the new account if it is trusted\n        // provider.connect({ onlyIfTrusted: true }).catch((err) => {\n        //   // fail silently\n        // });\n        // Or, always trying to reconnect\n        provider\n          .connect()\n          .then(() => console.log('[accountChanged] Reconnected successfully'))\n          .catch((err: Error) => {\n            console.log(`[accountChanged] Failed to re-connect: ${err.message}`);\n          });\n      }\n    });\n    return () => {\n      void provider.disconnect();\n    };\n  }, [provider]);\n\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const connectWallet = async () => {\n    try {\n      const account = await provider.connect();\n      const network = await provider.network();\n\n      setAddress(account.address);\n      setNetwork(network);\n      setConnected(true);\n\n      console.log('[connectWallet] account', account, network);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] connect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    try {\n      await provider.disconnect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] disconnect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const generateTransaction = async () => {\n    const sender = address;\n    const payload = {\n      function: '0x1::coin::transfer',\n      type_arguments: ['0x1::aptos_coin::AptosCoin'],\n      arguments: [address, 50],\n    };\n    const options = {\n      max_gas_amount: '10000',\n    };\n    const res = await provider.generateTransaction(sender, payload, options);\n    console.log('[generateTransaction]', res);\n    return res;\n  };\n\n  const signAndSubmitTransaction = async () => {\n    const txn = await generateTransaction();\n    const res = await provider.signAndSubmitTransaction(txn);\n    console.log('[signAndSubmitTransaction]', res);\n  };\n\n  const signTransaction = async () => {\n    const txn = await generateTransaction();\n    const res = await provider.signTransaction(txn);\n    console.log('[signTransaction]', res);\n    return res;\n  };\n\n  const submitTransaction = async () => {\n    const txn = await signTransaction();\n    const res = await provider.submitTransaction(txn);\n    console.log('[submitTransaction]', res);\n  };\n\n  const signGenericTransaction = async () => {\n    const res = await provider.signGenericTransaction({\n      func: '0x1::coin::transfer',\n      args: [address, 500],\n      type_args: ['0x1::aptos_coin::AptosCoin'],\n    });\n    console.log('[signGenericTransaction]', res);\n  };\n\n  const generateSignAndSubmitTransaction = async () => {\n    const sender = address;\n    const payload = {\n      function: '0x1::coin::transfer',\n      type_arguments: ['0x1::aptos_coin::AptosCoin'],\n      arguments: [address, 50],\n    };\n    const res = await provider.generateSignAndSubmitTransaction(sender, payload);\n    console.log('[generateSignAndSubmitTransaction]', res);\n  };\n\n  const signMessage = async () => {\n    const res = await provider.signMessage({\n      address: false,\n      application: true,\n      chainId: true,\n      message: 'This is a sample message',\n      nonce: 12345,\n    });\n    console.log('[signMessage]', res);\n  };\n\n  const createCollection = async () => {\n    const res = await provider.createCollection(\n      collectionName,\n      'CollectionDescription',\n      'https://aptos.dev',\n    );\n    console.log('[createCollection]', res);\n  };\n\n  const createToken = async () => {\n    const res = await provider.createToken(\n      collectionName,\n      nftTokenName,\n      'TokenDescription',\n      1,\n      'https://aptos.dev/img/nyan.jpeg',\n      1,\n    );\n    console.log('[createToken]', res);\n  };\n\n  const getTransactions = async () => {\n    const res = await provider.getTransactions();\n    console.log('[getTransactions]', res);\n  };\n\n  const getTransaction = async () => {\n    const res = await provider.getTransaction(\n      '0xbeb1f8c4e66bf0f58afca8c83338fd9a54490d46ce25fe9c8674b67f1e7bbd3a',\n    );\n    console.log('[getTransaction]', res);\n  };\n\n  const getAccountTransactions = async () => {\n    const res = await provider.getAccountTransactions(address);\n    console.log('[getAccountTransactions]', res);\n  };\n\n  const getAccountResources = async () => {\n    const res = await provider.getAccountResources(address);\n    console.log('[getAccountResources]', res);\n  };\n\n  const getAccount = async () => {\n    const res = await provider.getAccount(address);\n    console.log('[getAccount]', res);\n  };\n\n  const getChainId = async () => {\n    const res = await provider.getChainId();\n    console.log('[getChainId]', res);\n  };\n\n  const getLedgerInfo = async () => {\n    const res = await provider.getLedgerInfo();\n    console.log('[getLedgerInfo]', res);\n  };\n\n  const msafeMultiSignature = async () => {\n    const addressFormat = (addr: string) => TxnBuilderTypes.AccountAddress.fromHex(addr);\n    const testMsafe = '0xaa90e0d9d16b63ba4a289fb0dc8d1b454058b21c9b5c76864f825d5c1f32582e';\n\n    const serializer = new BCS.Serializer();\n    const owners = [\n      \"0x5c7b342e9ee2e582ad16fb602e8ebb6ba39b3bfa02a4fd3865853b10dc75765f\",\n      \"0xa3f6a53c57395401ce64f09a188e2259dc9b156387e76c88a7a80a8fe5254476\",\n    ];\n    BCS.serializeVector(\n      owners.map((owner) => addressFormat(owner)),\n      serializer\n    );\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        `0xaa90e0d9d16b63ba4a289fb0dc8d1b454058b21c9b5c76864f825d5c1f32582e::creator`,\n        \"init_wallet_creation\",\n        [],\n        [\n          serializer.getBytes(),\n          BCS.bcsSerializeU8(2),\n          BCS.bcsSerializeUint64(10000000),\n          BCS.bcsSerializeBytes(\n            new HexString(\n              \"b5e97db07fa0bd0e5598aa3643a9bc6f6693bddc1a9fec9e674a461eaa00b193a527b6487c9ba480a3dbfbc351a3fcafd0a5044a0b3c877f759fa5df64a692f1000000000000000002aa90e0d9d16b63ba4a289fb0dc8d1b454058b21c9b5c76864f825d5c1f32582e0d6d6f6d656e74756d5f7361666508726567697374657200010c0b77616c6c6574206e616d65e02e0000000000007800000000000000fa7984630000000001\"\n            ).toUint8Array()\n          ),\n          BCS.bcsSerializeBytes(\n            new HexString(\n              \"fc284900723375e6b087a166c04edf6a1b71a361ad671608a849b733a878aaf910150dcf28e0f197675137abb328db6b55a6d98bee53413ad49c16549c1f0701\"\n            ).toUint8Array()\n          ),\n        ]\n      )\n    );\n\n    const sn = await provider.getAccount(testMsafe).then(acc => BigInt(acc.sequence_number) + BigInt(1))\n\n    const testTxn = new TxnBuilderTypes.RawTransaction(\n      TxnBuilderTypes.AccountAddress.fromHex(testMsafe),\n      sn,\n      payload,\n      BigInt(20123),\n      BigInt(123),\n      BigInt(1793884475),\n      new TxnBuilderTypes.ChainId(1)\n    );\n    const bcsUnsignedTxn = BCS.bcsToBytes(testTxn);\n    //@ts-expect-error\n    const res: string = await provider.signTransaction(HexString.fromUint8Array(bcsUnsignedTxn).noPrefix());\n    const bcsSignedTxn = Uint8Array.from(res.split(\",\").map((s) => Number(s)));\n    const signedTransaction = TxnBuilderTypes.SignedTransaction.deserialize(\n      new BCS.Deserializer(bcsSignedTxn)\n    );\n\n    console.log('[msafeMultiSignature] success ', JSON.stringify(signedTransaction, (key, value) =>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      typeof value === 'bigint'\n        ? value.toString()\n        : value\n    ));\n  };\n\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n      {!provider && (\n        <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n          Install OneKey Extension →\n        </a>\n      )}\n      <main>\n        {provider && connected ? (\n          <>\n            <div>\n              <pre>Network: {network}</pre>\n              <pre>Connected as: {address}</pre>\n            </div>\n            <button onClick={generateTransaction}>Generate Transaction</button>\n            <button onClick={signAndSubmitTransaction}>Sign&Send Transaction</button>\n            <button onClick={signTransaction}>Sign Transaction </button>\n            <button onClick={submitTransaction}>Submit Transaction </button>\n            <button onClick={signGenericTransaction}>Sign Generic Transaction </button>\n            <button onClick={generateSignAndSubmitTransaction}>\n              Generate Sign&Send Transaction{' '}\n            </button>\n            <button onClick={signMessage}>Sign Message</button>\n            <button onClick={getTransactions}>Get Transactions</button>\n            <button onClick={getTransaction}>Get Transaction</button>\n            <button onClick={getAccountTransactions}>Get Account Transaction</button>\n            <button onClick={getAccountResources}>Get Account Resources</button>\n            <button onClick={getAccount}>Get Account</button>\n            <button onClick={getChainId}>Get ChainId</button>\n            <button onClick={getLedgerInfo}>Get LedgerInfo</button>\n            <button onClick={() => disconnectWallet()}>Disconnect</button>\n\n            <br />\n            <br />\n            <div style={{ border: '1px solid #cccccc', flexDirection: 'column' }}>\n              <pre>Collection Name: <input\n                type=\"text\"\n                placeholder=\"Collection Name\"\n                value={collectionName}\n                onChange={(e) => setCollectionName(e.target.value)}\n              /> 不能重名，要改名字。</pre>\n              <pre><button onClick={createCollection}>Create Collection</button></pre>\n            </div>\n\n            <br />\n            <div style={{ border: '1px solid #cccccc', flexDirection: 'column' }}>\n              <pre>Collection Name: <input\n                type=\"text\"\n                placeholder=\"Collection Name\"\n                value={collectionName}\n                onChange={(e) => setCollectionName(e.target.value)}\n              /> 指定链上已经存在的 Collection Name。</pre>\n              <pre>NFT Name: <input\n                type=\"text\"\n                placeholder=\"Token Name\"\n                value={nftTokenName}\n                onChange={(e) => setNftTokenName(e.target.value)}\n              /> NFT Name 不能重名，要改名字。</pre>\n              <pre><button onClick={createToken}>Create Token</button></pre>\n            </div>\n\n            <br />\n            <div style={{ border: '1px solid #cccccc', flexDirection: 'column' }}>\n              Msafe Multi-signature Demo (Mainnet)\n              <pre><button onClick={msafeMultiSignature}>Sign Transaction</button></pre>\n            </div>\n          </>\n        ) : (\n          <>\n            <button onClick={() => connectWallet()}>Connect Wallet</button>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} ↗\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","/* (ignored) */"],"names":["dapps","name","url","useProvider","_useState","useState","_useState2","_slicedToArray","provider","setProvider","useEffect","console","log","window","martian","injectedProvider","ProviderAptosMartian","App","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_useState3","_useState4","network","setNetwork","_useState5","_useState6","connected","setConnected","_useState7","_useState8","address","setAddress","_useState9","_useState10","collectionName","setCollectionName","_useState11","_useState12","nftTokenName","setNftTokenName","onNetworkChange","onAccountChange","connect","then","catch","err","message","disconnect","_jsx","children","connectWallet","_asyncToGenerator","account","warn","JSON","stringify","apply","arguments","disconnectWallet","generateTransaction","res","function","type_arguments","max_gas_amount","signAndSubmitTransaction","txn","signTransaction","submitTransaction","signGenericTransaction","func","args","type_args","generateSignAndSubmitTransaction","payload","signMessage","application","chainId","nonce","createCollection","createToken","getTransactions","getTransaction","getAccountTransactions","getAccountResources","getAccount","getChainId","getLedgerInfo","msafeMultiSignature","testMsafe","serializer","BCS","owners","map","owner","TxnBuilderTypes","getBytes","HexString","toUint8Array","sn","acc","BigInt","sequence_number","testTxn","bcsUnsignedTxn","noPrefix","bcsSignedTxn","Uint8Array","from","split","s","Number","key","value","toString","_jsxs","DAppList","target","href","_Fragment","onClick","style","border","flexDirection","type","placeholder","onChange","e","props","className","styles","dapp"],"sourceRoot":""}