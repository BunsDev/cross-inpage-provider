{"version":3,"file":"static/chunks/5098.08f6ac291c027c07.js","mappings":"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","sources":["webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/./components/polkadot/dapps.config.ts","webpack://_N_E/./components/polkadot/PolkadotExample.tsx","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@noble/secp256k1/lib/esm|crypto","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@polkadot/util/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/tweetnacl|crypto","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} â†—\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","export const dapps = [\n  {\n    name: 'Polkadot.js',\n    url: 'https://polkadot.js.org/apps',\n  },\n  {\n    name: 'Bifrost',\n    url: 'https://bifrost.app/',\n  },\n  {\n    name: 'Polkaswap',\n    url: 'https://polkaswap.io/',\n  },\n];\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { signatureVerify } from '@polkadot/util-crypto';\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from './dapps.config';\nimport { web3Accounts, web3AccountsSubscribe, web3Enable, web3FromSource } from '@polkadot/extension-dapp';\nimport type { InjectedExtension, Unsubcall } from '@polkadot/extension-inject/types';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { hexToU8a, stringToHex } from '@polkadot/util';\n\nexport default function App() {\n  const [connected, setConnected] = useState<boolean>(false);\n  const [address, setAddress] = useState<string | null>(null);\n  const [provider, setProvider] = useState<InjectedExtension>();\n  const [api, setApi] = useState<ApiPromise>();\n\n  useEffect(() => {\n    if (!provider) return;\n\n    let unsubcall: Unsubcall\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    (async () => {\n      unsubcall = await web3AccountsSubscribe((accounts) => {\n        console.log('[web3AccountsSubscribe]', JSON.stringify(accounts));\n      });\n    })();\n\n    return () => {\n      void unsubcall?.();\n    };\n  }, [provider]);\n\n\n  const getAccounts = async () => {\n    try {\n      const apiAccounts = await web3Accounts();\n      console.log('[getAccounts apiAccounts]', apiAccounts);\n\n      const accounts = await provider.accounts.get()\n      console.log('[getAccounts]', accounts);\n      return accounts\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] getAccounts: ${JSON.stringify(err)}`);\n    }\n  };\n\n\n  const connectWallet = async () => {\n    try {\n      // Construct\n      const wsProvider = new WsProvider('wss://rpc.polkadot.io');\n\n      const allInjected = await web3Enable('my cool dapp');\n      const [provider] = allInjected;\n\n      const api = await ApiPromise.create({ provider: wsProvider });\n      setApi(api);\n\n      if (provider) {\n\n        setProvider(provider);\n        const accounts = await provider.accounts.get()\n        const [account] = accounts\n        setAddress(account.address);\n        setConnected(true);\n\n        console.log('[connectWallet] account', accounts);\n\n        console.log('[connectWallet] provider.name', provider.name);\n        console.log('[connectWallet] provider.version', provider.version);\n        console.log('[connectWallet] provider.metadata', provider.metadata);\n        console.log('[connectWallet] provider.provider', provider.provider);\n        console.log('[connectWallet] provider.signer', provider.signer);\n      } else {\n        console.log('[error] connectWallet', allInjected);\n      }\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] connectWallet: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const executeTransfer = () => {\n    if (!provider) return;\n\n    api.tx.balances\n      .transfer(address, 123456)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      .signAndSend(address, { signer: provider.signer }, (status) => {\n        console.log('[executeTransfer] status', status);\n      }).catch((err) => {\n        console.log('[executeTransfer] error', err);\n      });\n  }\n\n  const executeSignMessage = async () => {\n    if (!provider) return;\n\n    const [account] = await web3Accounts();\n    const injector = await web3FromSource(account.meta.source);\n    // this injector object has a signer and a signRaw method\n    // to be able to sign raw bytes\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const signRaw = injector?.signer?.signRaw;\n\n    if (signRaw) {\n      // after making sure that signRaw is defined\n      // we can use it to sign our message\n      try {\n        const message = stringToHex('message to sign')\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n        const { signature } = await signRaw({\n          address: account.address,\n          data: message,\n          type: 'bytes'\n        });\n\n        console.log('[executeSignMessage] signature', signature);\n\n        const { isValid } = signatureVerify(hexToU8a(message), hexToU8a(signature as string), account.address);\n\n        if (isValid) {\n          console.log('[executeSignMessage] Valid success');\n        } else {\n          console.log('[executeSignMessage] Valid error');\n        }\n      } catch (error) {\n        console.log('[executeSignMessage] error', error);\n      }\n    } else {\n      console.log('[executeSignMessage] error', 'signRaw is undefined');\n    }\n  }\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n\n      <main>\n        {connected ? (\n          <>\n            <button onClick={getAccounts}>Get Accounts</button>\n            <button onClick={executeTransfer}>Sign & Execute Transaction</button>\n            <button onClick={executeSignMessage}>Sign Message</button>\n          </>\n        ) : (\n          <>\n            <button onClick={() => connectWallet()}>Connect Wallet</button>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["DAppList","props","dapps","_jsxs","className","styles","children","_jsx","map","dapp","href","url","target","name","App","_ref2","_ref3","_ref4","_useState","useState","_useState2","_slicedToArray","connected","setConnected","_useState3","_useState4","address","setAddress","_useState5","_useState6","provider","setProvider","_useState7","_useState8","api","setApi","useEffect","unsubcall","_asyncToGenerator","web3AccountsSubscribe","accounts","console","log","JSON","stringify","getAccounts","apiAccounts","web3Accounts","get","err","warn","apply","arguments","connectWallet","wsProvider","WsProvider","allInjected","web3Enable","_allInjected","ApiPromise","account","_accounts","version","metadata","signer","executeSignMessage","_injector$signer","_yield$web3Accounts","_yield$web3Accounts2","injector","web3FromSource","meta","source","signRaw","message","stringToHex","signature","_yield$signRaw","data","type","_signatureVerify","signatureVerify","hexToU8a","isValid","error","_Fragment","onClick","tx","balances","transfer","signAndSend","status","catch"],"sourceRoot":""}