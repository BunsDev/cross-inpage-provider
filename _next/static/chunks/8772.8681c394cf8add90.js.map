{"version":3,"file":"static/chunks/8772.8681c394cf8add90.js","mappings":"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","sources":["webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/./components/sui/utils.ts","webpack://_N_E/./components/suiStandard/dapps.config.ts","webpack://_N_E/./components/suiStandard/SuiExample.tsx","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/tweetnacl|crypto","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} â†—\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","import { dapps } from './dapps.config';\nimport {\n  JsonRpcProvider,\n  SUI_TYPE_ARG,\n  TransactionBlock,\n  SuiAddress,\n  CoinStruct,\n  PaginatedCoins,\n} from '@mysten/sui.js';\n\nconst MAX_COINS_PER_REQUEST = 50;\n\nexport const getAllCoins = async(\n  provider: JsonRpcProvider,\n  address: SuiAddress,\n  coinType: string | null,\n): Promise<CoinStruct[]> => {\n  let cursor: string | null = null;\n  const allData: CoinStruct[] = [];\n  do {\n\n    const { data, nextCursor }: PaginatedCoins = await provider.getCoins({\n      owner: address,\n      coinType,\n      cursor,\n      limit: MAX_COINS_PER_REQUEST,\n    });\n\n    if (!data || !data.length) {\n      break;\n    }\n\n\n    allData.push(...data);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    cursor = nextCursor;\n  } while (cursor);\n\n  return allData;\n}\n\nexport const buildTransfer = async (\n  provider: JsonRpcProvider,\n  sender: string,\n  to: string,\n  amount: string,\n  argType?: string,\n): Promise<TransactionBlock> => {\n  const recipient = to;\n  const isSuiTransfer = argType == null || argType === '';\n\n  const typeArg = isSuiTransfer ? SUI_TYPE_ARG : argType;\n\n  const coinsData = await getAllCoins(provider, sender, typeArg);\n\n  const coins = coinsData?.filter(({ lockedUntilEpoch: lock }) => !lock);\n\n  const tx = new TransactionBlock();\n\n  const [primaryCoin, ...mergeCoins] = coins.filter(\n    (coin) => coin.coinType === typeArg,\n  );\n\n  if (typeArg === SUI_TYPE_ARG) {\n    const coin = tx.splitCoins(tx.gas, [tx.pure(amount)]);\n    tx.transferObjects([coin], tx.pure(recipient));\n  } else {\n    const primaryCoinInput = tx.object(primaryCoin.coinObjectId);\n    if (mergeCoins.length) {\n      tx.mergeCoins(\n        primaryCoinInput,\n        mergeCoins.map((coin) => tx.object(coin.coinObjectId)),\n      );\n    }\n    const coin = tx.splitCoins(primaryCoinInput, [tx.pure(amount)]);\n    tx.transferObjects([coin], tx.pure(recipient));\n  }\n  return tx;\n};\n","export const dapps = [\n  {\n    name: 'Cetus',\n    url: 'https://app.cetus.zone/',\n  },\n  {\n    name: 'SuiSwap',\n    url: 'https://suiswap.app/',\n  },\n  {\n    name: 'Sui Names',\n    url: 'https://sui-names.com/',\n  },\n];\n","import React, { useCallback } from 'react';\nimport { useState, useEffect, useMemo } from 'react';\nimport { bytesToHex, hexToBytes } from '@noble/hashes/utils';\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from './dapps.config';\nimport { JsonRpcProvider, Connection } from '@mysten/sui.js';\nimport { buildTransfer } from '../sui/utils';\nimport { WalletKitProvider, ConnectButton, useWalletKit } from '@mysten/wallet-kit';\n\nfunction DappTest() {\n  const [network, setNetwork] = useState<string>('TestNet');\n  const [address, setAddress] = useState<string>();\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const {\n    isConnected,\n    accounts,\n    disconnect,\n    currentAccount,\n    signTransactionBlock,\n    signAndExecuteTransactionBlock,\n    signMessage,\n  } = useWalletKit();\n\n  useEffect(() => {\n    const [address] = accounts || [];\n    if (address) setAddress(address.address);\n  }, [accounts]);\n\n  const rpcProvider = useMemo(() => {\n    if (network.toLowerCase() === 'testnet') {\n      return new JsonRpcProvider(\n        new Connection({\n          fullnode: 'https://fullnode.testnet.sui.io',\n          faucet: 'https://faucet.testnet.sui.io/gas',\n        }),\n      );\n    } else {\n      return new JsonRpcProvider(\n        new Connection({\n          fullnode: 'https://fullnode.mainnet.sui.io',\n          faucet: 'https://faucet.testnet.sui.io/gas',\n        }),\n      );\n    }\n  }, [network]);\n\n  const requestSuiFromFaucet = async () => {\n    try {\n      const [address] = accounts;\n      const faucet = await rpcProvider.requestSuiFromFaucet(address.address);\n      console.log('[requestSuiFromFaucet] faucet success:', faucet);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] requestSuiFromFaucet: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const _getAccounts = useCallback(() => {\n    try {\n      console.log('[getAccounts] accounts:', accounts);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] getAccounts: ${JSON.stringify(err)}`);\n    }\n  }, [accounts]);\n\n  const disconnectWallet = async () => {\n    try {\n      await disconnect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] disconnect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const signAndExecuteTransaction = async () => {\n    try {\n      const address = accounts[0].address;\n      const transfer = await buildTransfer(\n        rpcProvider,\n        address,\n        '0xe40a5a0133cac4e9059f58f9d2074a3386d631390e40eadb43d2606e8975f3eb',\n        '100000',\n      );\n      const res: unknown = await signAndExecuteTransactionBlock({\n        transactionBlock: transfer,\n        chain: network.toLowerCase() === 'sui:testnet' ? 'sui:testnet' : 'sui:mainnet',\n        account: currentAccount,\n      });\n\n      console.log('[signAndExecuteTransaction]', res);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] signAndExecuteTransaction: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const signTransaction = async () => {\n    try {\n      const address = accounts[0].address;\n      const transfer = await buildTransfer(\n        rpcProvider,\n        address,\n        '0xe40a5a0133cac4e9059f58f9d2074a3386d631390e40eadb43d2606e8975f3eb',\n        '100000',\n      );\n      const res: unknown = await signTransactionBlock({\n        transactionBlock: transfer,\n        chain: network.toLowerCase() === 'sui:testnet' ? 'sui:testnet' : 'sui:mainnet',\n        account: currentAccount,\n      });\n\n      console.log('[signTransaction]', res);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] signTransaction: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const signMessageAction = async () => {\n    try {\n      const res: unknown = await signMessage({\n        message: hexToBytes('010203'),\n        account: currentAccount,\n      });\n\n      console.log('[signAndExecuteTransaction]', res);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] signAndExecuteTransaction: ${JSON.stringify(err)}`);\n    }\n  };\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n\n      {isConnected && (\n        <>\n          <div>\n            <pre>\n              Network:{' '}\n              <select value={network} onChange={(e) => setNetwork(e.target.value)}>\n                <option value=\"TestNet\">TestNet</option>\n                <option value=\"MainNet\">MainNet</option>\n              </select>\n            </pre>\n            <pre>Connected as: {address}</pre>\n            <button onClick={requestSuiFromFaucet}>Faucet SUI</button>\n          </div>\n\n          <br />\n          <button onClick={_getAccounts}>Get Accounts</button>\n          <button onClick={async () => await signAndExecuteTransaction()}>\n            Sign & Execute Transaction\n          </button>\n          <button onClick={async () => await signTransaction()}>Sign Transaction</button>\n          <button onClick={async () => await signMessageAction()}>Sign Message</button>\n          <button onClick={() => disconnectWallet()}>Disconnect</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <WalletKitProvider features={['sui:signTransactionBlock']} enableUnsafeBurner>\n      <ConnectButton />\n      <DappTest />\n    </WalletKitProvider>\n  );\n}\n","/* (ignored) */"],"names":["DAppList","props","dapps","_jsxs","className","styles","children","_jsx","map","dapp","href","url","target","name","_ref","_ref2","getAllCoins","_asyncToGenerator","provider","address","coinType","cursor","allData","_yield$provider$getCo","getCoins","owner","limit","data","nextCursor","length","push","apply","_toConsumableArray","_x","_x2","_x3","arguments","buildTransfer","sender","to","amount","argType","typeArg","isSuiTransfer","SUI_TYPE_ARG","coinsData","coins","filter","_ref3","lockedUntilEpoch","tx","TransactionBlock","_coins$filter","coin","_coins$filter2","_toArray","primaryCoin","mergeCoins","slice","splitCoins","gas","pure","transferObjects","primaryCoinInput","object","coinObjectId","_x4","_x5","_x6","_x7","_x8","DappTest","_ref4","_ref5","_ref6","_ref7","_useState","useState","_useState2","_slicedToArray","network","setNetwork","_useState3","_useState4","setAddress","_useWalletKit","useWalletKit","isConnected","accounts","disconnect","currentAccount","signTransactionBlock","signAndExecuteTransactionBlock","signMessage","useEffect","rpcProvider","useMemo","JsonRpcProvider","Connection","toLowerCase","fullnode","faucet","requestSuiFromFaucet","_accounts","console","log","err","warn","JSON","stringify","_getAccounts","useCallback","disconnectWallet","signAndExecuteTransaction","transfer","res","transactionBlock","chain","account","signTransaction","signMessageAction","message","hexToBytes","_Fragment","value","onChange","e","onClick","App","WalletKitProvider","features","enableUnsafeBurner","ConnectButton"],"sourceRoot":""}